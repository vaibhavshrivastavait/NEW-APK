/**
 * Enhanced Evidence-Based Decision Support Screen
 * Comprehensive medicine analysis with remove controls and interaction checking
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  TextInput,
  Linking,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { MaterialIcons } from '@expo/vector-icons';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import useAssessmentStore from '../store/assessmentStore';

// Import enhanced components and utilities
import MedicineSelector from '../components/MedicineSelector';
import AnalysisResultsDisplay from '../components/AnalysisResultsDisplay';
import { 
  drugAnalyzer, 
  createMedicineItem, 
  type MedicineItem, 
  type AnalysisResult 
} from '../utils/enhancedDrugAnalyzer';
import { medicinePersistence } from '../utils/medicinePersistence';

// Import existing decision support utilities for backward compatibility
import { 
  MEDICATION_CATEGORIES,
  MEDICINE_TYPES,
  checkCategoryDrugInteractions,
  getMedicineTypeContraindications,
  getMedicineTypeRecommendations,
  getMedicineTypeAlternatives,
  type MedicationCategory,
  type MedicineType,
  type DrugInteractionResult,
  type ContraindicationAlert,
  type TreatmentRecommendation,
  type AlternativeTherapy
} from '../utils/drugInteractionChecker';

// Import existing treatment generator for backward compatibility
import medicineBasedTreatmentGenerator, { 
  type SelectedMedicine, 
  type TreatmentPlanOutput 
} from '../utils/medicineBasedTreatmentGenerator';

// Import rules engine
import { createAssessmentInput } from '../utils/rulesEngine';

type Props = {
  navigation: NativeStackNavigationProp<any>;
};

export default function DecisionSupportScreen({ navigation }: Props) {
  const { currentPatient } = useAssessmentStore();
  
  // Enhanced medicine state management
  const [medicines, setMedicines] = useState<MedicineItem[]>([]);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [showMultiSelect, setShowMultiSelect] = useState(false);
  const [customMedicineInput, setCustomMedicineInput] = useState<string>('');
  
  // Legacy state for backward compatibility
  const [selectedMedicineType, setSelectedMedicineType] = useState<string>('');
  const [selectedMedicationCategories, setSelectedMedicationCategories] = useState<string[]>([]);
  const [drugInteractions, setDrugInteractions] = useState<DrugInteractionResult[]>([]);
  const [contraindications, setContraindications] = useState<ContraindicationAlert[]>([]);
  const [treatmentRecommendations, setTreatmentRecommendations] = useState<TreatmentRecommendation[]>([]);
  const [alternativeTherapies, setAlternativeTherapies] = useState<AlternativeTherapy[]>([]);
  
  // Treatment plan generation states
  const [isGeneratingPlan, setIsGeneratingPlan] = useState(false);
  const [generationProgress, setGenerationProgress] = useState('');

  // Load saved medicines on component mount
  useEffect(() => {
    if (currentPatient) {
      loadPatientMedicines();
    }
  }, [currentPatient]);

  // Legacy effect for backward compatibility
  useEffect(() => {
    if (selectedMedicineType && currentPatient) {
      updateSectionsForMedicineType();
    } else {
      setContraindications([]);
      setTreatmentRecommendations([]);
      setAlternativeTherapies([]);
    }
  }, [selectedMedicineType, currentPatient]);

  useEffect(() => {
    if (selectedMedicationCategories.length > 0) {
      const interactions = checkCategoryDrugInteractions(selectedMedicationCategories);
      setDrugInteractions(interactions);
    } else {
      setDrugInteractions([]);
    }
  }, [selectedMedicationCategories]);

  const loadPatientMedicines = async () => {
    if (!currentPatient) return;
    
    try {
      const savedMedicines = await medicinePersistence.loadMedicinesForPatient(currentPatient.id);
      setMedicines(savedMedicines);
      
      // Load cached analysis if available
      const cachedAnalysis = await medicinePersistence.loadCachedAnalysis(currentPatient.id);
      if (cachedAnalysis && savedMedicines.length > 0) {
        setAnalysisResult(cachedAnalysis);
      }
    } catch (error) {
      console.error('Failed to load patient medicines:', error);
    }
  };

  const saveMedicines = async (updatedMedicines: MedicineItem[]) => {
    if (!currentPatient) return;
    
    try {
      await medicinePersistence.saveMedicinesForPatient(currentPatient.id, updatedMedicines);
    } catch (error) {
      console.error('Failed to save medicines:', error);
    }
  };

  // Medicine management functions
  const addMedicine = useCallback(async (name: string, category: string, type: string) => {
    if (!currentPatient) {
      Alert.alert('No Patient', 'Please complete an assessment first.');
      return;
    }

    try {
      const newMedicine = createMedicineItem(name, category, type);
      const updatedMedicines = [...medicines, newMedicine];
      
      setMedicines(updatedMedicines);
      await saveMedicines(updatedMedicines);
      
      // Clear analysis results since medicines changed
      setAnalysisResult(null);
      await medicinePersistence.invalidateAnalysisCache(currentPatient.id);
    } catch (error) {
      Alert.alert('Error', 'Failed to add medicine: ' + (error as Error).message);
    }
  }, [medicines, currentPatient]);

  const removeMedicine = useCallback(async (medicineId: string) => {
    if (!currentPatient) return;
    
    try {
      const updatedMedicines = medicines.filter(m => m.id !== medicineId);
      setMedicines(updatedMedicines);
      await saveMedicines(updatedMedicines);
      
      // Clear analysis results since medicines changed
      setAnalysisResult(null);
      await medicinePersistence.invalidateAnalysisCache(currentPatient.id);
    } catch (error) {
      Alert.alert('Error', 'Failed to remove medicine: ' + (error as Error).message);
    }
  }, [medicines, currentPatient]);

  const removeMultipleMedicines = useCallback(async (medicineIds: string[]) => {
    if (!currentPatient) return;
    
    try {
      const updatedMedicines = medicines.filter(m => !medicineIds.includes(m.id));
      setMedicines(updatedMedicines);
      await saveMedicines(updatedMedicines);
      
      // Clear analysis results since medicines changed
      setAnalysisResult(null);
      await medicinePersistence.invalidateAnalysisCache(currentPatient.id);
      
      setShowMultiSelect(false);
    } catch (error) {
      Alert.alert('Error', 'Failed to remove medicines: ' + (error as Error).message);
    }
  }, [medicines, currentPatient]);

  const addCustomMedicine = useCallback(() => {
    if (!customMedicineInput.trim()) {
      Alert.alert('Invalid Input', 'Please enter a medicine name.');
      return;
    }

    const medicineType = detectMedicineType(customMedicineInput.trim());
    addMedicine(customMedicineInput.trim(), 'CUSTOM', medicineType);
    setCustomMedicineInput('');
  }, [customMedicineInput, addMedicine]);

  // Enhanced medicine analysis
  const analyzeMedicines = useCallback(async () => {
    if (medicines.length === 0) {
      Alert.alert('No Medicines', 'Please select medicines to analyze.');
      return;
    }

    if (!currentPatient) {
      Alert.alert('No Patient Data', 'Patient assessment data is required for analysis.');
      return;
    }

    setIsAnalyzing(true);
    
    try {
      // Prepare patient conditions for analysis
      const patientConditions = {
        personalHistoryBreastCancer: currentPatient.personalHistoryBreastCancer,
        personalHistoryDVT: currentPatient.personalHistoryDVT,
        age: currentPatient.age,
        bmi: currentPatient.bmi,
        smoking: currentPatient.smoking,
        hypertension: currentPatient.hypertension,
        diabetes: currentPatient.diabetes
      };

      console.log('🔍 Starting comprehensive medicine analysis...');
      const result = await drugAnalyzer.analyzeMedicines(medicines, patientConditions);
      
      setAnalysisResult(result);
      
      // Cache the results
      await medicinePersistence.cacheAnalysisResult(currentPatient.id, result);
      
      console.log('✅ Analysis completed successfully');
    } catch (error) {
      console.error('❌ Analysis failed:', error);
      Alert.alert(
        'Analysis Failed',
        'Failed to analyze medicines. Using offline mode.',
        [
          { text: 'OK' },
          { text: 'Retry', onPress: analyzeMedicines }
        ]
      );
    } finally {
      setIsAnalyzing(false);
    }
  }, [medicines, currentPatient]);

  // Quick medicine addition functions
  const addQuickMedicine = useCallback((name: string, type: string) => {
    const category = type.split('_')[0] || 'GENERAL';
    addMedicine(name, category, type);
  }, [addMedicine]);

  // Medicine type detection (enhanced)
  const detectMedicineType = (medicineName: string): string => {
    const name = medicineName.toLowerCase();
    
    // HRT medications
    if (name.includes('estradiol') || name.includes('estrogen') || name.includes('premarin')) {
      return 'estrogen_oral';
    }
    if (name.includes('progesterone') || name.includes('progestin') || name.includes('medroxy')) {
      return 'progestogen_oral';
    }
    
    // Antidepressants
    if (name.includes('sertraline') || name.includes('fluoxetine') || name.includes('paroxetine') || 
        name.includes('venlafaxine') || name.includes('escitalopram')) {
      return 'ssri';
    }
    
    // Anticoagulants
    if (name.includes('warfarin') || name.includes('apixaban') || name.includes('rivaroxaban')) {
      return 'anticoagulant';
    }
    
    // NSAIDs
    if (name.includes('ibuprofen') || name.includes('naproxen') || name.includes('diclofenac')) {
      return 'nsaid';
    }
    
    // Herbal supplements
    if (name.includes('black cohosh') || name.includes('red clover') || name.includes('herbal') || 
        name.includes('supplement') || name.includes('cohosh')) {
      return 'herbal';
    }
    
    return 'unknown';
  };

  // Legacy functions for backward compatibility
  const updateSectionsForMedicineType = () => {
    if (!currentPatient || !selectedMedicineType) return;

    const medicineContraindications = getMedicineTypeContraindications(currentPatient, selectedMedicineType);
    setContraindications(medicineContraindications);

    const recommendations = getMedicineTypeRecommendations(currentPatient, selectedMedicineType, medicineContraindications);
    setTreatmentRecommendations(recommendations);

    const hasContraindications = medicineContraindications.length > 0;
    const alternatives = getMedicineTypeAlternatives(selectedMedicineType, hasContraindications);
    setAlternativeTherapies(alternatives);
  };

  const handleMedicineTypeSelection = (medicineTypeId: string) => {
    setSelectedMedicineType(medicineTypeId);
  };

  const handleMedicationCategoryToggle = (categoryId: string) => {
    setSelectedMedicationCategories(prev => 
      prev.includes(categoryId) 
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const openExternalLink = async (url: string) => {
    try {
      const supported = await Linking.canOpenURL(url);
      if (supported) {
        await Linking.openURL(url);
      } else {
        Alert.alert('Error', 'Unable to open link. Please check your internet connection.');
      }
    } catch (error) {
      Alert.alert('Error', 'Unable to open external link.');
    }
  };

  // Legacy treatment plan generation
  const generateTreatmentPlan = async () => {
    console.log('🚀 Starting treatment plan generation...');
    
    setIsGeneratingPlan(true);
    setGenerationProgress('Initializing treatment plan generation...');

    try {
      if (medicines.length === 0) {
        setGenerationProgress('No medicines selected - generating general recommendations...');
        navigation.navigate('TreatmentPlan', { 
          generatedPlan: {
            id: 'general-plan-' + Date.now(),
            generatedAt: new Date().toISOString(),
            patientId: currentPatient?.id || 'anonymous',
            selectedMedicines: [],
            primaryRecommendations: [
              {
                id: 'rec-1',
                recommendation: 'Consider comprehensive assessment of menopausal symptoms',
                rationale: 'Individual treatment plans should be based on symptom severity and patient preferences'
              }
            ],
            interactionWarnings: [],
            alternativeTherapies: [],
            rationale: [],
            monitoring: [],
            specialNotes: [],
            isOfflineGenerated: true
          },
          selectedMedicines: []
        });
        return;
      }

      setGenerationProgress(`Analyzing ${medicines.length} selected medicine(s)...`);
      
      // Convert to legacy format for compatibility
      const legacyMedicines: SelectedMedicine[] = medicines.map(med => ({
        id: med.id,
        name: med.name,
        type: med.type,
        category: med.category
      }));

      const plan = await medicineBasedTreatmentGenerator.generateTreatmentPlan(
        legacyMedicines,
        {
          age: currentPatient?.age,
          gender: currentPatient?.gender || 'female',
          personalHistoryBreastCancer: currentPatient?.personalHistoryBreastCancer,
          personalHistoryDVT: currentPatient?.personalHistoryDVT,
          hypertension: currentPatient?.hypertension,
          diabetes: currentPatient?.diabetes,
          smoking: currentPatient?.smoking,
          liverDisease: currentPatient?.liverDisease,
          unexplainedVaginalBleeding: currentPatient?.unexplainedVaginalBleeding,
          currentMedications: currentPatient?.currentMedications,
          allergies: currentPatient?.allergies,
        },
        currentPatient?.id
      );
      
      setGenerationProgress('Treatment plan generated successfully!');
      
      navigation.navigate('TreatmentPlan', { 
        generatedPlan: plan,
        selectedMedicines: legacyMedicines
      });

    } catch (error) {
      console.error('❌ Treatment plan generation error:', error);
      Alert.alert(
        'Treatment Plan Generation Failed',
        'Failed to generate treatment plan. Would you like to retry?',
        [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Retry', onPress: generateTreatmentPlan }
        ]
      );
    } finally {
      setIsGeneratingPlan(false);
      setGenerationProgress('');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardContainer}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton} 
            onPress={() => navigation.goBack()}
            testID="back-button"
          >
            <MaterialIcons name="arrow-back" size={24} color="#D81B60" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Evidence-Based Decision Support</Text>
          <View style={styles.headerSpacer} />
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          
          {/* Drug Interaction Checker - Default First Panel */}
          <View style={styles.featureCard}>
            <View style={styles.featureHeader}>
              <MaterialIcons name="warning" size={28} color="#FF9800" />
              <Text style={styles.featureTitle}>Drug Interaction Checker</Text>
            </View>
            
            <Text style={styles.featureDescription}>
              Select medicines and analyze for interactions, contraindications, and clinical recommendations.
            </Text>

            {/* Enhanced Medicine Selection with Remove Controls */}
            <View style={styles.medicineManagementSection}>
              <View style={styles.sectionHeader}>
                <Text style={styles.sectionSubtitle}>Medicine Selection:</Text>
                <View style={styles.headerActions}>
                  {medicines.length > 1 && (
                    <TouchableOpacity
                      style={styles.multiSelectToggle}
                      onPress={() => setShowMultiSelect(!showMultiSelect)}
                      accessibilityLabel="Toggle multi-select mode"
                    >
                      <MaterialIcons 
                        name={showMultiSelect ? "check-box" : "check-box-outline-blank"} 
                        size={16} 
                        color="#007AFF" 
                      />
                      <Text style={styles.multiSelectText}>Multi-select</Text>
                    </TouchableOpacity>
                  )}
                </View>
              </View>

              {/* Quick Medicine Selection */}
              <View style={styles.quickMedicineButtons}>
                <TouchableOpacity 
                  style={styles.quickMedicineButton}
                  onPress={() => addQuickMedicine('Estradiol', 'estrogen_oral')}
                >
                  <Text style={styles.quickMedicineText}>+ Estrogen</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.quickMedicineButton}
                  onPress={() => addQuickMedicine('Warfarin', 'anticoagulant')}
                >
                  <Text style={styles.quickMedicineText}>+ Anticoagulant</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.quickMedicineButton}
                  onPress={() => addQuickMedicine('Ibuprofen', 'nsaid')}
                >
                  <Text style={styles.quickMedicineText}>+ NSAID</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.quickMedicineButton}
                  onPress={() => addQuickMedicine('Sertraline', 'ssri')}
                >
                  <Text style={styles.quickMedicineText}>+ SSRI</Text>
                </TouchableOpacity>
              </View>

              {/* Custom Medicine Input */}
              <View style={styles.customMedicineInput}>
                <TextInput
                  style={styles.medicineInput}
                  placeholder="Enter medicine name (e.g., Sertraline, Black Cohosh)"
                  value={customMedicineInput}
                  onChangeText={setCustomMedicineInput}
                  onSubmitEditing={addCustomMedicine}
                />
                <TouchableOpacity 
                  style={styles.addMedicineButton}
                  onPress={addCustomMedicine}
                >
                  <MaterialIcons name="add" size={20} color="#D81B60" />
                </TouchableOpacity>
              </View>

              {/* Enhanced Medicine Selector with Remove Controls */}
              <View style={styles.medicineSelectorContainer}>
                <MedicineSelector
                  medicines={medicines}
                  onRemoveMedicine={removeMedicine}
                  onRemoveMultipleMedicines={removeMultipleMedicines}
                  multiSelectMode={showMultiSelect}
                  showRemoveControls={true}
                  accessibilityLabel="Selected medicines for analysis"
                />
              </View>

              {/* Analyze Medicines Button */}
              <TouchableOpacity
                style={[
                  styles.analyzeMedicinesButton,
                  medicines.length === 0 && styles.analyzeMedicinesButtonDisabled
                ]}
                onPress={analyzeMedicines}
                disabled={isAnalyzing || medicines.length === 0}
                accessibilityLabel={`Analyze ${medicines.length} selected medicines`}
                accessibilityRole="button"
              >
                {isAnalyzing ? (
                  <>
                    <ActivityIndicator size="small" color="white" />
                    <Text style={styles.analyzeMedicinesButtonText}>Analyzing...</Text>
                  </>
                ) : (
                  <>
                    <MaterialIcons name="science" size={20} color="white" />
                    <Text style={styles.analyzeMedicinesButtonText}>
                      Analyze Medicines ({medicines.length})
                    </Text>
                  </>
                )}
              </TouchableOpacity>
            </View>

            {/* Analysis Results Display */}
            <AnalysisResultsDisplay
              analysisResult={analysisResult}
              onRetryAnalysis={analyzeMedicines}
              isLoading={isAnalyzing}
            />
          </View>

          {/* Treatment Plan Generation Section */}
          {medicines.length > 0 && (
            <View style={styles.treatmentPlanSection}>
              <View style={styles.featureHeader}>
                <MaterialIcons name="assignment" size={24} color="#007AFF" />
                <Text style={styles.featureTitle}>Treatment Plan Generation</Text>
              </View>
              
              {isGeneratingPlan ? (
                <View style={styles.loadingContainer}>
                  <ActivityIndicator size="large" color="#D81B60" />
                  <Text style={styles.loadingText}>Generating Treatment Plan...</Text>
                  <Text style={styles.progressText}>{generationProgress}</Text>
                </View>
              ) : (
                <View style={styles.treatmentButtonsContainer}>
                  <TouchableOpacity 
                    style={styles.treatmentPlanButton} 
                    onPress={generateTreatmentPlan}
                    disabled={isGeneratingPlan}
                  >
                    <MaterialIcons name="assignment" size={24} color="#FFF" />
                    <Text style={styles.treatmentPlanButtonText}>
                      Generate Medicine-Based Plan ({medicines.length})
                    </Text>
                    <MaterialIcons name="arrow-forward" size={20} color="#FFF" />
                  </TouchableOpacity>

                  <TouchableOpacity 
                    style={styles.rulesBasedTreatmentButton} 
                    onPress={() => {
                      if (!currentPatient) {
                        Alert.alert('No Patient Data', 'Please complete an assessment first to generate a rules-based treatment plan.');
                        navigation.navigate('PatientIntake');
                        return;
                      }
                      
                      const assessmentData = {
                        age: currentPatient.age,
                        ascvdScore: currentPatient.ascvdScore,
                        framinghamScore: currentPatient.framinghamScore,
                        gailScore: currentPatient.gailScore,
                        tyrerCuzickScore: currentPatient.tyrerCuzickScore,
                        wellsScore: currentPatient.wellsScore,
                        wells_recent_event: currentPatient.wells_recent_event || false,
                        fraxScore: currentPatient.fraxScore,
                        currentMedications: medicines.map(m => m.name),
                        selectedTherapy: selectedMedicineType || 'none',
                        symptomSeverity: currentPatient.symptomSeverity || 5,
                        breastCancerActive: currentPatient.breastCancerActive || false
                      };
                      
                      navigation.navigate('RulesBasedTreatmentPlan', {
                        assessmentData,
                        patientData: currentPatient
                      });
                    }}
                  >
                    <MaterialIcons name="rule" size={20} color="#007AFF" />
                    <Text style={styles.rulesBasedTreatmentButtonText}>
                      Generate Rules-Based Plan
                    </Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>
          )}

          {/* Fixed Bottom Button: View Decision Support */}
          <TouchableOpacity 
            style={styles.viewDecisionSupportButton} 
            onPress={() => navigation.navigate('DecisionSupportDetail', {
              patientData: currentPatient,
              riskResults: null,
              selectedMedicine: medicines.length > 0 ? medicines[0].name : 'Not selected',
              currentMedications: medicines.map(med => med.name),
              analysisResult: analysisResult
            })}
          >
            <MaterialIcons name="analytics" size={20} color="white" />
            <Text style={styles.viewDecisionSupportButtonText}>
              View Decision Support
            </Text>
            <MaterialIcons name="arrow-forward" size={16} color="white" />
          </TouchableOpacity>

          <View style={styles.bottomPadding} />
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

  const updateSectionsForMedicineType = () => {
    if (!currentPatient || !selectedMedicineType) return;

    // 1. Get contraindications specific to medicine type
    const medicineContraindications = getMedicineTypeContraindications(currentPatient, selectedMedicineType);
    setContraindications(medicineContraindications);

    // 2. Get medicine-type-specific recommendations
    const recommendations = getMedicineTypeRecommendations(currentPatient, selectedMedicineType, medicineContraindications);
    setTreatmentRecommendations(recommendations);

    // 3. Get alternatives if medicine is contraindicated
    const hasContraindications = medicineContraindications.length > 0;
    const alternatives = getMedicineTypeAlternatives(selectedMedicineType, hasContraindications);
    setAlternativeTherapies(alternatives);
  };

  const handleMedicineTypeSelection = (medicineTypeId: string) => {
    setSelectedMedicineType(medicineTypeId);
  };

  const handleMedicationCategoryToggle = (categoryId: string) => {
    setSelectedMedicationCategories(prev => 
      prev.includes(categoryId) 
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const openExternalLink = async (url: string) => {
    try {
      const supported = await Linking.canOpenURL(url);
      if (supported) {
        await Linking.openURL(url);
      } else {
        Alert.alert('Error', 'Unable to open link. Please check your internet connection.');
      }
    } catch (error) {
      Alert.alert('Error', 'Unable to open external link.');
    }
  };

  // Add quick medicine selection from common categories
  const addQuickMedicine = (name: string, type: string) => {
    addSelectedMedicine(name, type, type.split('_')[0]);
  };

  // Medicine management functions
  const addSelectedMedicine = (name: string, type: string, category: string) => {
    const newMedicine: SelectedMedicine = {
      id: `med-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: name.trim(),
      type: type,
      category: category
    };

    setSelectedMedicines(prev => {
      // Avoid duplicates
      const exists = prev.some(med => med.name.toLowerCase() === name.toLowerCase());
      if (exists) {
        Alert.alert('Duplicate Medicine', 'This medicine is already selected.');
        return prev;
      }
      return [...prev, newMedicine];
    });
  };

  const removeMedicine = (medicineId: string) => {
    setSelectedMedicines(prev => prev.filter(med => med.id !== medicineId));
  };

  const addCustomMedicine = () => {
    if (!customMedicineInput.trim()) {
      Alert.alert('Invalid Input', 'Please enter a medicine name.');
      return;
    }

    // Try to determine medicine type from name
    const medicineType = detectMedicineType(customMedicineInput.trim());
    
    addSelectedMedicine(
      customMedicineInput.trim(),
      medicineType,
      'CUSTOM'
    );
    
    setCustomMedicineInput('');
  };

  const detectMedicineType = (medicineName: string): string => {
    const name = medicineName.toLowerCase();
    
    // Common HRT medications
    if (name.includes('estradiol') || name.includes('estrogen') || name.includes('premarin')) {
      return 'HRT_ESTROGEN';
    }
    if (name.includes('progesterone') || name.includes('progestin') || name.includes('medroxy')) {
      return 'HRT_PROGESTOGEN';
    }
    
    // Antidepressants
    if (name.includes('sertraline') || name.includes('fluoxetine') || name.includes('paroxetine') || 
        name.includes('venlafaxine') || name.includes('escitalopram')) {
      return 'ANTIDEPRESSANT_SSRI';
    }
    
    // Anticoagulants
    if (name.includes('warfarin') || name.includes('apixaban') || name.includes('rivaroxaban')) {
      return 'ANTICOAGULANT';
    }
    
    // Herbal supplements
    if (name.includes('black cohosh') || name.includes('red clover') || name.includes('herbal') || 
        name.includes('supplement') || name.includes('cohosh')) {
      return 'HERBAL_SUPPLEMENT';
    }
    
    return 'UNKNOWN';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return '#F44336';
      case 'moderate': return '#FF9800';
      case 'low': return '#4CAF50';
      default: return '#666';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'recommended': return '#4CAF50';
      case 'caution': return '#FF9800';
      case 'not_recommended': return '#F44336';
      default: return '#666';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'medication': return 'medication';
      case 'lifestyle': return 'fitness-center';
      case 'psychological': return 'psychology';
      case 'complementary': return 'spa';
      default: return 'info';
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardContainer}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton} 
            onPress={() => navigation.goBack()}
            testID="back-button"
          >
            <MaterialIcons name="arrow-back" size={24} color="#D81B60" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Evidence-Based Decision Support</Text>
          <View style={styles.headerSpacer} />
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          
          {/* Drug Interaction Checker - Always Visible */}
          <View style={styles.featureCard}>
            <View style={styles.featureHeader}>
              <MaterialIcons name="warning" size={28} color="#FF9800" />
              <Text style={styles.featureTitle}>Drug Interaction Checker</Text>
            </View>
            
            <Text style={styles.featureDescription}>
              First, select the type of medicine you are considering, then choose any current medications to check for interactions.
            </Text>
            
            {/* Medicine Type Selector */}
            <View style={styles.medicineTypeSection}>
              <Text style={styles.sectionSubtitle}>Select Medicine Type:</Text>
              <View style={styles.medicineTypeGrid}>
                {MEDICINE_TYPES.map((medicineType) => (
                  <TouchableOpacity
                    key={medicineType.id}
                    style={[
                      styles.medicineTypeCard,
                      selectedMedicineType === medicineType.id && styles.medicineTypeCardSelected
                    ]}
                    onPress={() => handleMedicineTypeSelection(medicineType.id)}
                  >
                    <View style={styles.medicineTypeHeader}>
                      <MaterialIcons 
                        name={
                          medicineType.category === 'hormonal' ? 'local-pharmacy' :
                          medicineType.category === 'herbal' ? 'eco' : 'medical-services'
                        } 
                        size={20} 
                        color={selectedMedicineType === medicineType.id ? "#D81B60" : "#666"} 
                      />
                      <Text style={[
                        styles.medicineTypeName,
                        selectedMedicineType === medicineType.id && styles.medicineTypeNameSelected
                      ]}>
                        {medicineType.name}
                      </Text>
                    </View>
                    <Text style={styles.medicineTypeDescription}>{medicineType.description}</Text>
                    <View style={[
                      styles.riskLevelBadge,
                      { backgroundColor: 
                        medicineType.riskLevel === 'high' ? '#FFEBEE' :
                        medicineType.riskLevel === 'moderate' ? '#FFF3E0' : '#E8F5E8'
                      }
                    ]}>
                      <Text style={[
                        styles.riskLevelText,
                        { color: 
                          medicineType.riskLevel === 'high' ? '#F44336' :
                          medicineType.riskLevel === 'moderate' ? '#FF9800' : '#4CAF50'
                        }
                      ]}>
                        {medicineType.riskLevel.toUpperCase()} RISK
                      </Text>
                    </View>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            {/* Current Medications Selector - Only show if medicine type selected */}
            {selectedMedicineType && (
              <View style={styles.medicationCategoriesSection}>
                <Text style={styles.sectionSubtitle}>Current Medications (Optional):</Text>
                <Text style={styles.categoriesDescription}>
                  Select any medications you are currently taking to check for interactions:
                </Text>
                {MEDICATION_CATEGORIES.map((category) => ( // Show ALL categories
                  <TouchableOpacity
                    key={category.id}
                    style={[
                      styles.categoryCard,
                      selectedMedicationCategories.includes(category.id) && styles.categoryCardSelected
                    ]}
                    onPress={() => handleMedicationCategoryToggle(category.id)}
                  >
                    <View style={styles.categoryHeader}>
                      <MaterialIcons 
                        name={selectedMedicationCategories.includes(category.id) ? "check-box" : "check-box-outline-blank"} 
                        size={20} 
                        color={selectedMedicationCategories.includes(category.id) ? "#D81B60" : "#999"} 
                      />
                      <Text style={[
                        styles.categoryName,
                        selectedMedicationCategories.includes(category.id) && styles.categoryNameSelected
                      ]}>
                        {category.name}
                      </Text>
                    </View>
                    <Text style={styles.categoryDescription}>{category.description}</Text>
                    <Text style={styles.categoryExamples}>
                      Examples: {category.examples.slice(0, 3).join(', ')}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            )}
            
            {/* Drug Interactions Display */}
            {drugInteractions.length > 0 && (
              <View style={styles.resultsSection}>
                <Text style={styles.resultsTitle}>Interaction Results ({drugInteractions.length}):</Text>
                {drugInteractions.map((interaction, index) => (
                  <View key={index} style={[styles.interactionCard, { borderLeftColor: getSeverityColor(interaction.severity) }]}>
                    <View style={styles.interactionHeader}>
                      <Text style={styles.medicationName}>{interaction.medication}</Text>
                      <Text style={[styles.severityBadge, { backgroundColor: getSeverityColor(interaction.severity) }]}>
                        {interaction.severity.toUpperCase()}
                      </Text>
                    </View>
                    <Text style={styles.interactionMessage}>{interaction.message}</Text>
                    <Text style={styles.interactionRecommendation}>
                      <Text style={styles.boldText}>Recommendation: </Text>
                      {interaction.recommendation}
                    </Text>
                    <TouchableOpacity 
                      style={styles.learnMoreButton}
                      onPress={() => openExternalLink(interaction.source)}
                    >
                      <Text style={styles.learnMoreText}>Learn More</Text>
                      <MaterialIcons name="open-in-new" size={16} color="#D81B60" />
                    </TouchableOpacity>
                  </View>
                ))}
              </View>
            )}
            
            <TouchableOpacity 
              style={styles.learnMoreButton}
              onPress={() => openExternalLink('https://www.fda.gov/drugs/drug-interactions-labeling/drug-development-and-drug-interactions-table-substrates-inhibitors-and-inducers')}
            >
              <Text style={styles.learnMoreText}>Learn More About Drug Interactions</Text>
              <MaterialIcons name="open-in-new" size={16} color="#D81B60" />
            </TouchableOpacity>
          </View>

          {/* Conditional Sections - Temporarily disabled for debugging */}
          
          {/* Medicine Selection Section - Always Show */}
          <View style={styles.medicineSelectionSection}>
            <Text style={styles.sectionTitle}>Selected Medicines for Analysis</Text>
            
            {/* Quick Medicine Selection */}
            <View style={styles.quickMedicineButtons}>
              <TouchableOpacity 
                style={styles.quickMedicineButton}
                onPress={() => addQuickMedicine('Estradiol patch', 'HRT_ESTROGEN')}
              >
                <Text style={styles.quickMedicineText}>+ HRT Estrogen</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.quickMedicineButton}
                onPress={() => addQuickMedicine('Progesterone', 'HRT_PROGESTOGEN')}
              >
                <Text style={styles.quickMedicineText}>+ HRT Progestogen</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.quickMedicineButton}
                onPress={() => addQuickMedicine('Black Cohosh', 'HERBAL_SUPPLEMENT')}
              >
                <Text style={styles.quickMedicineText}>+ Herbal</Text>
              </TouchableOpacity>
            </View>

            {/* Custom Medicine Input */}
            <View style={styles.customMedicineInput}>
              <TextInput
                style={styles.medicineInput}
                placeholder="Enter medicine name (e.g., Sertraline, Warfarin)"
                value={customMedicineInput}
                onChangeText={setCustomMedicineInput}
                onSubmitEditing={addCustomMedicine}
              />
              <TouchableOpacity 
                style={styles.addMedicineButton}
                onPress={addCustomMedicine}
              >
                <MaterialIcons name="add" size={20} color="#D81B60" />
              </TouchableOpacity>
            </View>

            {/* Selected Medicines List */}
            {selectedMedicines.length > 0 && (
              <View style={styles.selectedMedicinesList}>
                <Text style={styles.selectedMedicinesTitle}>
                  Selected Medicines ({selectedMedicines.length})
                </Text>
                {selectedMedicines.map((medicine) => (
                  <View key={medicine.id} style={styles.selectedMedicineItem}>
                    <View style={styles.medicineInfo}>
                      <Text style={styles.medicineName}>{medicine.name}</Text>
                      <Text style={styles.medicineType}>
                        {medicine.type.replace('_', ' ')} • {medicine.category}
                      </Text>
                    </View>
                    <TouchableOpacity
                      style={styles.removeMedicineButton}
                      onPress={() => removeMedicine(medicine.id)}
                    >
                      <MaterialIcons name="close" size={18} color="#F44336" />
                    </TouchableOpacity>
                  </View>
                ))}
              </View>
            )}
          </View>

          {/* Treatment Plan Generator */}
          <View style={styles.treatmentPlanSection}>
            {isGeneratingPlan ? (
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#D81B60" />
                <Text style={styles.loadingText}>Generating Treatment Plan...</Text>
                <Text style={styles.progressText}>{generationProgress}</Text>
              </View>
            ) : (
              <View style={styles.treatmentButtonsContainer}>
                <TouchableOpacity 
                  style={[
                    styles.treatmentPlanButton,
                    selectedMedicines.length === 0 && styles.treatmentPlanButtonNoMeds
                  ]} 
                  onPress={generateTreatmentPlan}
                  disabled={isGeneratingPlan}
                >
                  <MaterialIcons name="assignment" size={24} color="#FFF" />
                  <Text style={styles.treatmentPlanButtonText}>
                    {selectedMedicines.length === 0 
                      ? 'Generate General Treatment Plan' 
                      : `Analyze ${selectedMedicines.length} Medicine(s)`
                    }
                  </Text>
                  <MaterialIcons name="arrow-forward" size={20} color="#FFF" />
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.rulesBasedTreatmentButton} 
                  onPress={() => {
                    if (!currentPatient) {
                      Alert.alert('No Patient Data', 'Please complete an assessment first to generate a rules-based treatment plan.');
                      navigation.navigate('PatientIntake');
                      return;
                    }
                    
                    // Create assessment data object
                    const assessmentData = {
                      age: currentPatient.age,
                      ascvdScore: currentPatient.ascvdScore,
                      framinghamScore: currentPatient.framinghamScore,
                      gailScore: currentPatient.gailScore,
                      tyrerCuzickScore: currentPatient.tyrerCuzickScore,
                      wellsScore: currentPatient.wellsScore,
                      wells_recent_event: currentPatient.wells_recent_event || false,
                      fraxScore: currentPatient.fraxScore,
                      currentMedications: selectedMedicationCategories,
                      selectedTherapy: selectedMedicineType || 'none',
                      symptomSeverity: currentPatient.symptomSeverity || 5,
                      breastCancerActive: currentPatient.breastCancerActive || false
                    };
                    
                    navigation.navigate('RulesBasedTreatmentPlan', {
                      assessmentData,
                      patientData: currentPatient
                    });
                  }}
                >
                  <MaterialIcons name="rule" size={20} color="#007AFF" />
                  <Text style={styles.rulesBasedTreatmentButtonText}>
                    Generate Rules-Based Plan
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={styles.decisionSupportButton} 
                  onPress={() => navigation.navigate('DecisionSupportDetail', {
                    patientData: currentPatient,
                    riskResults: null, // Would come from assessment results
                    selectedMedicine: selectedMedicines.length > 0 ? selectedMedicines[0].name : 'Not selected',
                    currentMedications: selectedMedicines.map(med => med.name)
                  })}
                >
                  <MaterialIcons name="analytics" size={20} color="#2196F3" />
                  <Text style={styles.decisionSupportButtonText}>
                    View Decision Support
                  </Text>
                </TouchableOpacity>
              </View>
            )}
            
            <Text style={styles.treatmentPlanDescription}>
              {selectedMedicines.length === 0 
                ? 'Generate general menopause management recommendations or view detailed decision support analysis' 
                : 'Create treatment plan based on selected medicines with interaction analysis'
              }
            </Text>
            
            {selectedMedicines.some(med => med.type === 'HERBAL_SUPPLEMENT') && (
              <View style={styles.herbalWarning}>
                <MaterialIcons name="info" size={16} color="#FF9800" />
                <Text style={styles.herbalWarningText}>
                  Herbal supplements selected - limited evidence available
                </Text>
              </View>
            )}
          </View>

          <View style={styles.bottomPadding} />
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFF0F5',
  },
  keyboardContainer: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  backButton: {
    padding: 8,
    marginRight: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#D81B60',
    flex: 1,
    textAlign: 'center',
  },
  headerSpacer: {
    width: 40,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  featureCard: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 20,
    marginVertical: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  featureHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  featureTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginLeft: 12,
    flex: 1,
  },
  featureDescription: {
    fontSize: 15,
    color: '#666',
    lineHeight: 22,
    marginBottom: 20,
  },
  medicineManagementSection: {
    marginBottom: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionSubtitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  multiSelectToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#F0F8FF',
    borderRadius: 6,
    gap: 4,
  },
  multiSelectText: {
    fontSize: 12,
    color: '#007AFF',
    fontWeight: '500',
  },
  quickMedicineButtons: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 16,
  },
  quickMedicineButton: {
    backgroundColor: '#E3F2FD',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#2196F3',
  },
  quickMedicineText: {
    color: '#1976D2',
    fontSize: 14,
    fontWeight: '500',
  },
  customMedicineInput: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  medicineInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: '#FFF',
  },
  addMedicineButton: {
    backgroundColor: '#D81B60',
    padding: 10,
    borderRadius: 8,
    marginLeft: 8,
  },
  medicineSelectorContainer: {
    minHeight: 120,
    marginBottom: 16,
  },
  analyzeMedicinesButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FF6B35',
    paddingVertical: 16,
    paddingHorizontal: 20,
    borderRadius: 10,
    gap: 8,
    marginVertical: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 4,
    elevation: 4,
  },
  analyzeMedicinesButtonDisabled: {
    backgroundColor: '#CCC',
    shadowOpacity: 0,
    elevation: 0,
  },
  analyzeMedicinesButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
  },
  treatmentPlanSection: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 20,
    marginVertical: 10,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  loadingContainer: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  loadingText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginTop: 12,
    marginBottom: 8,
  },
  progressText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  treatmentButtonsContainer: {
    gap: 12,
  },
  treatmentPlanButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#D81B60',
    paddingVertical: 16,
    paddingHorizontal: 20,
    borderRadius: 12,
    gap: 8,
  },
  treatmentPlanButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
    flex: 1,
    textAlign: 'center',
  },
  rulesBasedTreatmentButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
    borderWidth: 2,
    borderColor: '#007AFF',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 12,
    gap: 8,
  },
  rulesBasedTreatmentButtonText: {
    color: '#007AFF',
    fontSize: 15,
    fontWeight: '600',
  },
  viewDecisionSupportButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#28A745',
    paddingVertical: 16,
    paddingHorizontal: 20,
    borderRadius: 12,
    marginVertical: 20,
    gap: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 4,
    elevation: 4,
  },
  viewDecisionSupportButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  bottomPadding: {
    height: 100,
  },
});