{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":176,"column":32,"index":7942}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":176,"column":32,"index":7942}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"KK+yT+oF8ktP56kCbQmPR1OEhiQ="}},{"name":"./Font.types","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"K4Hyp3e8pgPTo4cphMtfc9wmlHI="}},{"name":"./FontLoader","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":114,"index":284}}],"key":"2OEhiAaqBQmRJPh1zT+UzMquCjU="}},{"name":"./memory","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":285},"end":{"line":5,"column":48,"index":333}}],"key":"20DdMTJ0uD+COOCv6dU8SL9WsuY="}},{"name":"./server","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":334},"end":{"line":6,"column":46,"index":380}}],"key":"wlSMlCoN7PgGuESmqgTQx6Vo3JE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.processFontFamily = processFontFamily;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = _$$_REQUIRE(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoFontLoader\"));\n  var _Font = _$$_REQUIRE(_dependencyMap[4], \"./Font.types\");\n  var _FontLoader = _$$_REQUIRE(_dependencyMap[5], \"./FontLoader\");\n  var _memory = _$$_REQUIRE(_dependencyMap[6], \"./memory\");\n  var _server = _$$_REQUIRE(_dependencyMap[7], \"./server\");\n  // @needsAudit\n  // note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n  /**\n   * Used to transform font family names to the scoped name. This does not need to\n   * be called in standalone or bare apps but it will return unscoped font family\n   * names if it is called in those contexts.\n   *\n   * @param fontFamily Name of font to process.\n   * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n   */\n  function processFontFamily(fontFamily) {\n    if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n      return fontFamily;\n    }\n    if (!isLoaded(fontFamily)) {\n      if (__DEV__) {\n        if (isLoading(fontFamily)) {\n          console.warn(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n        } else {\n          console.warn(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`);\n        }\n      }\n    }\n    return `ExpoFont-${(0, _FontLoader.getNativeFontName)(fontFamily)}`;\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return fontFamily in _memory.loaded || !!_ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return fontFamily in _memory.loaded || _ExpoFontLoader.default.customNativeFonts?.includes(fontFamily);\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * Highly efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n   * style prop with React Native Text elements.\n   * @param source the font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(function (name) {\n          return (0, _server.registerStaticFont)(name, fontMap[name]);\n        });\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(function (name) {\n        return loadFontInNamespaceAsync(name, fontMap[name]);\n      })).then(function () {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      if (_memory.loaded[fontFamily]) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          _memory.loaded[fontFamily] = true;\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      for (var fontFamily of Object.keys(_memory.loaded)) {\n        delete _memory.loaded[fontFamily];\n      }\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        }));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!_memory.loaded[fontFamily]) {\n        return;\n      } else {\n        delete _memory.loaded[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n      if (!nativeFontName) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(nativeFontName, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":218,"map":[[19,2,1,0],[19,6,1,0,"_expoModulesCore"],[19,22,1,0],[19,25,1,0,"_$$_REQUIRE"],[19,36,1,0],[19,37,1,0,"_dependencyMap"],[19,51,1,0],[20,2,2,0],[20,6,2,0,"_ExpoFontLoader"],[20,21,2,0],[20,24,2,0,"_interopRequireDefault"],[20,46,2,0],[20,47,2,0,"_$$_REQUIRE"],[20,58,2,0],[20,59,2,0,"_dependencyMap"],[20,73,2,0],[21,2,3,0],[21,6,3,0,"_Font"],[21,11,3,0],[21,14,3,0,"_$$_REQUIRE"],[21,25,3,0],[21,26,3,0,"_dependencyMap"],[21,40,3,0],[22,2,4,0],[22,6,4,0,"_FontLoader"],[22,17,4,0],[22,20,4,0,"_$$_REQUIRE"],[22,31,4,0],[22,32,4,0,"_dependencyMap"],[22,46,4,0],[23,2,5,0],[23,6,5,0,"_memory"],[23,13,5,0],[23,16,5,0,"_$$_REQUIRE"],[23,27,5,0],[23,28,5,0,"_dependencyMap"],[23,42,5,0],[24,2,6,0],[24,6,6,0,"_server"],[24,13,6,0],[24,16,6,0,"_$$_REQUIRE"],[24,27,6,0],[24,28,6,0,"_dependencyMap"],[24,42,6,0],[25,2,7,0],[26,2,8,0],[27,2,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,0,13,0],[32,0,14,0],[33,0,15,0],[34,0,16,0],[35,2,17,7],[35,11,17,16,"processFontFamily"],[35,28,17,33,"processFontFamily"],[35,29,17,34,"fontFamily"],[35,39,17,44],[35,41,17,46],[36,4,18,4],[36,8,18,8],[36,9,18,9,"fontFamily"],[36,19,18,19],[36,23,18,23],[36,24,18,24],[36,28,18,24,"fontFamilyNeedsScoping"],[36,62,18,46],[36,64,18,47,"fontFamily"],[36,74,18,57],[36,75,18,58],[36,77,18,60],[37,6,19,8],[37,13,19,15,"fontFamily"],[37,23,19,25],[38,4,20,4],[39,4,21,4],[39,8,21,8],[39,9,21,9,"isLoaded"],[39,17,21,17],[39,18,21,18,"fontFamily"],[39,28,21,28],[39,29,21,29],[39,31,21,31],[40,6,22,8],[40,10,22,12,"__DEV__"],[40,17,22,19],[40,19,22,21],[41,8,23,12],[41,12,23,16,"isLoading"],[41,21,23,25],[41,22,23,26,"fontFamily"],[41,32,23,36],[41,33,23,37],[41,35,23,39],[42,10,24,16,"console"],[42,17,24,23],[42,18,24,24,"warn"],[42,22,24,28],[42,23,24,29],[42,56,24,62,"fontFamily"],[42,66,24,72],[42,181,24,187],[42,182,24,188],[43,8,25,12],[43,9,25,13],[43,15,26,17],[44,10,27,16,"console"],[44,17,27,23],[44,18,27,24,"warn"],[44,22,27,28],[44,23,27,29],[44,38,27,44,"fontFamily"],[44,48,27,54],[44,115,27,121],[44,116,27,122],[45,8,28,12],[46,6,29,8],[47,4,30,4],[48,4,31,4],[48,11,31,11],[48,23,31,23],[48,27,31,23,"getNativeFontName"],[48,56,31,40],[48,58,31,41,"fontFamily"],[48,68,31,51],[48,69,31,52],[48,71,31,54],[49,2,32,0],[50,2,33,0],[51,2,34,0],[52,0,35,0],[53,0,36,0],[54,0,37,0],[55,0,38,0],[56,0,39,0],[57,2,40,7],[57,11,40,16,"isLoaded"],[57,19,40,24,"isLoaded"],[57,20,40,25,"fontFamily"],[57,30,40,35],[57,32,40,37],[58,4,41,4],[58,8,41,8,"Platform"],[58,33,41,16],[58,34,41,17,"OS"],[58,36,41,19],[58,41,41,24],[58,46,41,29],[58,48,41,31],[59,6,42,8],[59,13,42,15,"fontFamily"],[59,23,42,25],[59,27,42,29,"loaded"],[59,41,42,35],[59,45,42,39],[59,46,42,40],[59,47,42,41,"ExpoFontLoader"],[59,70,42,55],[59,71,42,56,"isLoaded"],[59,79,42,64],[59,80,42,65,"fontFamily"],[59,90,42,75],[59,91,42,76],[60,4,43,4],[61,4,44,4],[61,11,44,11,"fontFamily"],[61,21,44,21],[61,25,44,25,"loaded"],[61,39,44,31],[61,43,44,35,"ExpoFontLoader"],[61,66,44,49],[61,67,44,50,"customNativeFonts"],[61,84,44,67],[61,86,44,69,"includes"],[61,94,44,77],[61,95,44,78,"fontFamily"],[61,105,44,88],[61,106,44,89],[62,2,45,0],[63,2,46,0],[64,2,47,0],[65,0,48,0],[66,0,49,0],[67,0,50,0],[68,0,51,0],[69,0,52,0],[70,2,53,7],[70,11,53,16,"isLoading"],[70,20,53,25,"isLoading"],[70,21,53,26,"fontFamily"],[70,31,53,36],[70,33,53,38],[71,4,54,4],[71,11,54,11,"fontFamily"],[71,21,54,21],[71,25,54,25,"loadPromises"],[71,45,54,37],[72,2,55,0],[73,2,56,0],[74,2,57,0],[75,0,58,0],[76,0,59,0],[77,0,60,0],[78,0,61,0],[79,0,62,0],[80,0,63,0],[81,0,64,0],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,2,69,7],[86,11,69,16,"loadAsync"],[86,20,69,25,"loadAsync"],[86,21,69,26,"fontFamilyOrFontMap"],[86,40,69,45],[86,42,69,47,"source"],[86,48,69,53],[86,50,69,55],[87,4,70,4],[88,4,71,4],[89,4,72,4],[90,4,73,4],[90,8,73,10,"isServer"],[90,16,73,18],[90,19,73,21,"Platform"],[90,44,73,29],[90,45,73,30,"OS"],[90,47,73,32],[90,52,73,37],[90,57,73,42],[90,61,73,46],[90,68,73,53,"window"],[90,74,73,59],[90,79,73,64],[90,90,73,75],[91,4,74,4],[91,8,74,8],[91,15,74,15,"fontFamilyOrFontMap"],[91,34,74,34],[91,39,74,39],[91,47,74,47],[91,49,74,49],[92,6,75,8],[92,10,75,12,"source"],[92,16,75,18],[92,18,75,20],[93,8,76,12],[93,15,76,19,"Promise"],[93,22,76,26],[93,23,76,27,"reject"],[93,29,76,33],[93,30,76,34],[93,34,76,38,"CodedError"],[93,61,76,48],[93,62,76,49],[93,76,76,63],[93,78,76,65],[93,132,76,119,"source"],[93,138,76,125],[93,244,76,231],[93,245,76,232],[93,246,76,233],[94,6,77,8],[95,6,78,8],[95,10,78,14,"fontMap"],[95,17,78,21],[95,20,78,24,"fontFamilyOrFontMap"],[95,39,78,43],[96,6,79,8],[96,10,79,14,"names"],[96,15,79,19],[96,18,79,22,"Object"],[96,24,79,28],[96,25,79,29,"keys"],[96,29,79,33],[96,30,79,34,"fontMap"],[96,37,79,41],[96,38,79,42],[97,6,80,8],[97,10,80,12,"isServer"],[97,18,80,20],[97,20,80,22],[98,8,81,12,"names"],[98,13,81,17],[98,14,81,18,"map"],[98,17,81,21],[98,18,81,22],[98,28,81,23,"name"],[98,32,81,27],[99,10,81,27],[99,17,81,32],[99,21,81,32,"registerStaticFont"],[99,47,81,50],[99,49,81,51,"name"],[99,53,81,55],[99,55,81,57,"fontMap"],[99,62,81,64],[99,63,81,65,"name"],[99,67,81,69],[99,68,81,70],[99,69,81,71],[100,8,81,71],[100,10,81,72],[101,8,82,12],[101,15,82,19,"Promise"],[101,22,82,26],[101,23,82,27,"resolve"],[101,30,82,34],[101,31,82,35],[101,32,82,36],[102,6,83,8],[103,6,84,8],[103,13,84,15,"Promise"],[103,20,84,22],[103,21,84,23,"all"],[103,24,84,26],[103,25,84,27,"names"],[103,30,84,32],[103,31,84,33,"map"],[103,34,84,36],[103,35,84,37],[103,45,84,38,"name"],[103,49,84,42],[104,8,84,42],[104,15,84,47,"loadFontInNamespaceAsync"],[104,39,84,71],[104,40,84,72,"name"],[104,44,84,76],[104,46,84,78,"fontMap"],[104,53,84,85],[104,54,84,86,"name"],[104,58,84,90],[104,59,84,91],[104,60,84,92],[105,6,84,92],[105,8,84,93],[105,9,84,94],[105,10,84,95,"then"],[105,14,84,99],[105,15,84,100],[105,27,84,106],[105,28,84,108],[105,29,84,109],[105,30,84,110],[106,4,85,4],[107,4,86,4],[107,8,86,8,"isServer"],[107,16,86,16],[107,18,86,18],[108,6,87,8],[108,10,87,8,"registerStaticFont"],[108,36,87,26],[108,38,87,27,"fontFamilyOrFontMap"],[108,57,87,46],[108,59,87,48,"source"],[108,65,87,54],[108,66,87,55],[109,6,88,8],[109,13,88,15,"Promise"],[109,20,88,22],[109,21,88,23,"resolve"],[109,28,88,30],[109,29,88,31],[109,30,88,32],[110,4,89,4],[111,4,90,4],[111,11,90,11,"loadFontInNamespaceAsync"],[111,35,90,35],[111,36,90,36,"fontFamilyOrFontMap"],[111,55,90,55],[111,57,90,57,"source"],[111,63,90,63],[111,64,90,64],[112,2,91,0],[113,2,91,1],[113,11,92,15,"loadFontInNamespaceAsync"],[113,35,92,39,"loadFontInNamespaceAsync"],[113,36,92,39,"_x"],[113,38,92,39],[113,40,92,39,"_x2"],[113,43,92,39],[114,4,92,39],[114,11,92,39,"_loadFontInNamespaceAsync"],[114,36,92,39],[114,37,92,39,"apply"],[114,42,92,39],[114,49,92,39,"arguments"],[114,58,92,39],[115,2,92,39],[115,4,118,0],[116,2,119,0],[117,0,120,0],[118,0,121,0],[119,2,119,0],[119,11,119,0,"_loadFontInNamespaceAsync"],[119,37,119,0],[120,4,119,0,"_loadFontInNamespaceAsync"],[120,29,119,0],[120,36,119,0,"_asyncToGenerator2"],[120,54,119,0],[120,55,119,0,"default"],[120,62,119,0],[120,64,92,0],[120,75,92,40,"fontFamily"],[120,85,92,50],[120,87,92,52,"source"],[120,93,92,58],[120,95,92,60],[121,6,93,4],[121,10,93,8],[121,11,93,9,"source"],[121,17,93,15],[121,19,93,17],[122,8,94,8],[122,14,94,14],[122,18,94,18,"CodedError"],[122,45,94,28],[122,46,94,29],[122,63,94,46],[122,65,94,48],[122,114,94,97,"fontFamily"],[122,124,94,107],[122,130,94,113,"source"],[122,136,94,119],[122,206,94,189,"fontFamily"],[122,216,94,199],[122,219,94,202],[122,220,94,203],[123,6,95,4],[124,6,96,4],[124,10,96,8,"loaded"],[124,24,96,14],[124,25,96,15,"fontFamily"],[124,35,96,25],[124,36,96,26],[124,38,96,28],[125,8,97,8],[126,6,98,4],[127,6,99,4],[127,10,99,8,"loadPromises"],[127,30,99,20],[127,31,99,21,"hasOwnProperty"],[127,45,99,35],[127,46,99,36,"fontFamily"],[127,56,99,46],[127,57,99,47],[127,59,99,49],[128,8,100,8],[128,15,100,15,"loadPromises"],[128,35,100,27],[128,36,100,28,"fontFamily"],[128,46,100,38],[128,47,100,39],[129,6,101,4],[130,6,102,4],[131,6,103,4],[132,6,104,4],[133,6,105,4],[134,6,106,4],[134,10,106,10,"asset"],[134,15,106,15],[134,18,106,18],[134,22,106,18,"getAssetForSource"],[134,51,106,35],[134,53,106,36,"source"],[134,59,106,42],[134,60,106,43],[135,6,107,4,"loadPromises"],[135,26,107,16],[135,27,107,17,"fontFamily"],[135,37,107,27],[135,38,107,28],[135,41,107,31],[135,45,107,31,"_asyncToGenerator2"],[135,63,107,31],[135,64,107,31,"default"],[135,71,107,31],[135,73,107,32],[135,86,107,44],[136,8,108,8],[136,12,108,12],[137,10,109,12],[137,16,109,18],[137,20,109,18,"loadSingleFontAsync"],[137,51,109,37],[137,53,109,38,"fontFamily"],[137,63,109,48],[137,65,109,50,"asset"],[137,70,109,55],[137,71,109,56],[138,10,110,12,"loaded"],[138,24,110,18],[138,25,110,19,"fontFamily"],[138,35,110,29],[138,36,110,30],[138,39,110,33],[138,43,110,37],[139,8,111,8],[139,9,111,9],[139,18,112,16],[140,10,113,12],[140,17,113,19,"loadPromises"],[140,37,113,31],[140,38,113,32,"fontFamily"],[140,48,113,42],[140,49,113,43],[141,8,114,8],[142,6,115,4],[142,7,115,5],[142,9,115,7],[142,10,115,8],[143,6,116,4],[143,12,116,10,"loadPromises"],[143,32,116,22],[143,33,116,23,"fontFamily"],[143,43,116,33],[143,44,116,34],[144,4,117,0],[144,5,117,1],[145,4,117,1],[145,11,117,1,"_loadFontInNamespaceAsync"],[145,36,117,1],[145,37,117,1,"apply"],[145,42,117,1],[145,49,117,1,"arguments"],[145,58,117,1],[146,2,117,1],[147,2,117,1],[147,11,122,22,"unloadAllAsync"],[147,25,122,36,"unloadAllAsync"],[147,26,122,36],[148,4,122,36],[148,11,122,36,"_unloadAllAsync"],[148,26,122,36],[148,27,122,36,"apply"],[148,32,122,36],[148,39,122,36,"arguments"],[148,48,122,36],[149,2,122,36],[149,4,134,0],[150,2,135,0],[151,0,136,0],[152,0,137,0],[153,0,138,0],[154,0,139,0],[155,0,140,0],[156,0,141,0],[157,0,142,0],[158,2,135,0],[158,11,135,0,"_unloadAllAsync"],[158,27,135,0],[159,4,135,0,"_unloadAllAsync"],[159,19,135,0],[159,26,135,0,"_asyncToGenerator2"],[159,44,135,0],[159,45,135,0,"default"],[159,52,135,0],[159,54,122,7],[159,67,122,39],[160,6,123,4],[160,10,123,8],[160,11,123,9,"ExpoFontLoader"],[160,34,123,23],[160,35,123,24,"unloadAllAsync"],[160,49,123,38],[160,51,123,40],[161,8,124,8],[161,14,124,14],[161,18,124,18,"UnavailabilityError"],[161,54,124,37],[161,55,124,38],[161,66,124,49],[161,68,124,51],[161,84,124,67],[161,85,124,68],[162,6,125,4],[163,6,126,4],[163,10,126,8,"Object"],[163,16,126,14],[163,17,126,15,"keys"],[163,21,126,19],[163,22,126,20,"loadPromises"],[163,42,126,32],[163,43,126,33],[163,44,126,34,"length"],[163,50,126,40],[163,52,126,42],[164,8,127,8],[164,14,127,14],[164,18,127,18,"CodedError"],[164,45,127,28],[164,46,127,29],[164,58,127,41],[164,60,127,43],[164,112,127,95,"Object"],[164,118,127,101],[164,119,127,102,"keys"],[164,123,127,106],[164,124,127,107,"loadPromises"],[164,144,127,119],[164,145,127,120],[164,146,127,121,"join"],[164,150,127,125],[164,151,127,126],[164,155,127,130],[164,156,127,131],[164,158,127,133],[164,159,127,134],[165,6,128,4],[166,6,129,4],[166,11,129,9],[166,15,129,15,"fontFamily"],[166,25,129,25],[166,29,129,29,"Object"],[166,35,129,35],[166,36,129,36,"keys"],[166,40,129,40],[166,41,129,41,"loaded"],[166,55,129,47],[166,56,129,48],[166,58,129,50],[167,8,130,8],[167,15,130,15,"loaded"],[167,29,130,21],[167,30,130,22,"fontFamily"],[167,40,130,32],[167,41,130,33],[168,6,131,4],[169,6,132,4],[169,12,132,10,"ExpoFontLoader"],[169,35,132,24],[169,36,132,25,"unloadAllAsync"],[169,50,132,39],[169,51,132,40],[169,52,132,41],[170,4,133,0],[170,5,133,1],[171,4,133,1],[171,11,133,1,"_unloadAllAsync"],[171,26,133,1],[171,27,133,1,"apply"],[171,32,133,1],[171,39,133,1,"arguments"],[171,48,133,1],[172,2,133,1],[173,2,133,1],[173,11,143,22,"unloadAsync"],[173,22,143,33,"unloadAsync"],[173,23,143,33,"_x3"],[173,26,143,33],[173,28,143,33,"_x4"],[173,31,143,33],[174,4,143,33],[174,11,143,33,"_unloadAsync"],[174,23,143,33],[174,24,143,33,"apply"],[174,29,143,33],[174,36,143,33,"arguments"],[174,45,143,33],[175,2,143,33],[176,2,143,33],[176,11,143,33,"_unloadAsync"],[176,24,143,33],[177,4,143,33,"_unloadAsync"],[177,16,143,33],[177,23,143,33,"_asyncToGenerator2"],[177,41,143,33],[177,42,143,33,"default"],[177,49,143,33],[177,51,143,7],[177,62,143,34,"fontFamilyOrFontMap"],[177,81,143,53],[177,83,143,55,"options"],[177,90,143,62],[177,92,143,64],[178,6,144,4],[178,10,144,8],[178,11,144,9,"ExpoFontLoader"],[178,34,144,23],[178,35,144,24,"unloadAsync"],[178,46,144,35],[178,48,144,37],[179,8,145,8],[179,14,145,14],[179,18,145,18,"UnavailabilityError"],[179,54,145,37],[179,55,145,38],[179,66,145,49],[179,68,145,51],[179,81,145,64],[179,82,145,65],[180,6,146,4],[181,6,147,4],[181,10,147,8],[181,17,147,15,"fontFamilyOrFontMap"],[181,36,147,34],[181,41,147,39],[181,49,147,47],[181,51,147,49],[182,8,148,8],[182,12,148,12,"options"],[182,19,148,19],[182,21,148,21],[183,10,149,12],[183,16,149,18],[183,20,149,22,"CodedError"],[183,47,149,32],[183,48,149,33],[183,62,149,47],[183,64,149,49],[183,119,149,104,"options"],[183,126,149,111],[183,234,149,219],[183,235,149,220],[184,8,150,8],[185,8,151,8],[185,12,151,14,"fontMap"],[185,19,151,21],[185,22,151,24,"fontFamilyOrFontMap"],[185,41,151,43],[186,8,152,8],[186,12,152,14,"names"],[186,17,152,19],[186,20,152,22,"Object"],[186,26,152,28],[186,27,152,29,"keys"],[186,31,152,33],[186,32,152,34,"fontMap"],[186,39,152,41],[186,40,152,42],[187,8,153,8],[187,14,153,14,"Promise"],[187,21,153,21],[187,22,153,22,"all"],[187,25,153,25],[187,26,153,26,"names"],[187,31,153,31],[187,32,153,32,"map"],[187,35,153,35],[187,36,153,36],[187,46,153,37,"name"],[187,50,153,41],[188,10,153,41],[188,17,153,46,"unloadFontInNamespaceAsync"],[188,43,153,72],[188,44,153,73,"name"],[188,48,153,77],[188,50,153,79,"fontMap"],[188,57,153,86],[188,58,153,87,"name"],[188,62,153,91],[188,63,153,92],[188,64,153,93],[189,8,153,93],[189,10,153,94],[189,11,153,95],[190,8,154,8],[191,6,155,4],[192,6,156,4],[192,19,156,17,"unloadFontInNamespaceAsync"],[192,45,156,43],[192,46,156,44,"fontFamilyOrFontMap"],[192,65,156,63],[192,67,156,65,"options"],[192,74,156,72],[192,75,156,73],[193,4,157,0],[193,5,157,1],[194,4,157,1],[194,11,157,1,"_unloadAsync"],[194,23,157,1],[194,24,157,1,"apply"],[194,29,157,1],[194,36,157,1,"arguments"],[194,45,157,1],[195,2,157,1],[196,2,157,1],[196,11,158,15,"unloadFontInNamespaceAsync"],[196,37,158,41,"unloadFontInNamespaceAsync"],[196,38,158,41,"_x5"],[196,41,158,41],[196,43,158,41,"_x6"],[196,46,158,41],[197,4,158,41],[197,11,158,41,"_unloadFontInNamespaceAsync"],[197,38,158,41],[197,39,158,41,"apply"],[197,44,158,41],[197,51,158,41,"arguments"],[197,60,158,41],[198,2,158,41],[199,2,158,41],[199,11,158,41,"_unloadFontInNamespaceAsync"],[199,39,158,41],[200,4,158,41,"_unloadFontInNamespaceAsync"],[200,31,158,41],[200,38,158,41,"_asyncToGenerator2"],[200,56,158,41],[200,57,158,41,"default"],[200,64,158,41],[200,66,158,0],[200,77,158,42,"fontFamily"],[200,87,158,52],[200,89,158,54,"options"],[200,96,158,61],[200,98,158,63],[201,6,159,4],[201,10,159,8],[201,11,159,9,"loaded"],[201,25,159,15],[201,26,159,16,"fontFamily"],[201,36,159,26],[201,37,159,27],[201,39,159,29],[202,8,160,8],[203,6,161,4],[203,7,161,5],[203,13,162,9],[204,8,163,8],[204,15,163,15,"loaded"],[204,29,163,21],[204,30,163,22,"fontFamily"],[204,40,163,32],[204,41,163,33],[205,6,164,4],[206,6,165,4],[207,6,166,4],[208,6,167,4],[209,6,168,4],[210,6,169,4],[210,10,169,10,"nativeFontName"],[210,24,169,24],[210,27,169,27],[210,31,169,27,"getNativeFontName"],[210,60,169,44],[210,62,169,45,"fontFamily"],[210,72,169,55],[210,73,169,56],[211,6,170,4],[211,10,170,8],[211,11,170,9,"nativeFontName"],[211,25,170,23],[211,27,170,25],[212,8,171,8],[212,14,171,14],[212,18,171,18,"CodedError"],[212,45,171,28],[212,46,171,29],[212,63,171,46],[212,65,171,48],[212,94,171,77],[212,95,171,78],[213,6,172,4],[214,6,173,4],[214,12,173,10,"ExpoFontLoader"],[214,35,173,24],[214,36,173,25,"unloadAsync"],[214,47,173,36],[214,48,173,37,"nativeFontName"],[214,62,173,51],[214,64,173,53,"options"],[214,71,173,60],[214,72,173,61],[215,4,174,0],[215,5,174,1],[216,4,174,1],[216,11,174,1,"_unloadFontInNamespaceAsync"],[216,38,174,1],[216,39,174,1,"apply"],[216,44,174,1],[216,51,174,1,"arguments"],[216,60,174,1],[217,2,174,1],[218,0,174,1]],"functionMap":{"names":["<global>","processFontFamily","isLoaded","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCgB;CDe;OEQ;CFK;OGQ;CHE;OIc;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCe;KDQ;CPE;OSK;CTW;OUU;oCLU,yDK;CVI;AWC;CXgB"}},"type":"js/module"}]}