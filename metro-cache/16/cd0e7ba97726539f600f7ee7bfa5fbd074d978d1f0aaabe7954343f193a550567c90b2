{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":68,"column":1,"index":2624}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":68,"column":1,"index":2624}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":68,"column":1,"index":2624}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/createForOfIteratorHelperLoose","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":100,"index":100}}],"key":"jCLZUNQX7lPTz9OJifTXW6NeT0o="}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":311},"end":{"line":12,"column":43,"index":354}}],"key":"avnjoAx2FQYjx6eZ7ALk+OuZk68="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _createForOfIteratorHelperLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var ChildListCollection = exports.default = /*#__PURE__*/function () {\n    function ChildListCollection() {\n      (0, _classCallCheck2.default)(this, ChildListCollection);\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    return (0, _createClass2.default)(ChildListCollection, [{\n      key: \"add\",\n      value: function add(list, cellKey) {\n        var _this$_cellKeyToChild;\n        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n        var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n        cellLists.add(list);\n        this._cellKeyToChildren.set(cellKey, cellLists);\n        this._childrenToCellKey.set(list, cellKey);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(list) {\n        var cellKey = this._childrenToCellKey.get(list);\n        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n        this._childrenToCellKey.delete(list);\n        var cellLists = this._cellKeyToChildren.get(cellKey);\n        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n        cellLists.delete(list);\n        if (cellLists.size === 0) {\n          this._cellKeyToChildren.delete(cellKey);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(fn) {\n        for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n          var listSet = _step.value;\n          for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step2; !(_step2 = _iterator2()).done;) {\n            var list = _step2.value;\n            fn(list);\n          }\n        }\n      }\n    }, {\n      key: \"forEachInCell\",\n      value: function forEachInCell(cellKey, fn) {\n        var _this$_cellKeyToChild2;\n        var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n        for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step3; !(_step3 = _iterator3()).done;) {\n          var list = _step3.value;\n          fn(list);\n        }\n      }\n    }, {\n      key: \"anyInCell\",\n      value: function anyInCell(cellKey, fn) {\n        var _this$_cellKeyToChild3;\n        var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n        for (var _iterator4 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step4; !(_step4 = _iterator4()).done;) {\n          var list = _step4.value;\n          if (fn(list)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this._childrenToCellKey.size;\n      }\n    }]);\n  }();\n});","lineCount":90,"map":[[9,2,1,0],[9,6,1,0,"_createForOfIteratorHelperLoose2"],[9,38,1,0],[9,41,1,0,"_interopRequireDefault"],[9,63,1,0],[9,64,1,0,"_$$_REQUIRE"],[9,75,1,0],[9,76,1,0,"_dependencyMap"],[9,90,1,0],[10,2,12,0],[10,6,12,0,"_invariant"],[10,16,12,0],[10,19,12,0,"_interopRequireDefault"],[10,41,12,0],[10,42,12,0,"_$$_REQUIRE"],[10,53,12,0],[10,54,12,0,"_dependencyMap"],[10,68,12,0],[11,2,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,0,10,0],[20,2,2,0],[20,6,13,21,"ChildListCollection"],[20,25,13,40],[20,28,13,40,"exports"],[20,35,13,40],[20,36,13,40,"default"],[20,43,13,40],[21,4,14,2],[21,13,14,2,"ChildListCollection"],[21,33,14,2],[21,35,14,16],[22,6,14,16],[22,10,14,16,"_classCallCheck2"],[22,26,14,16],[22,27,14,16,"default"],[22,34,14,16],[22,42,14,16,"ChildListCollection"],[22,61,14,16],[23,6,15,4],[23,10,15,8],[23,11,15,9,"_cellKeyToChildren"],[23,29,15,27],[23,32,15,30],[23,36,15,34,"Map"],[23,39,15,37],[23,40,15,38],[23,41,15,39],[24,6,16,4],[24,10,16,8],[24,11,16,9,"_childrenToCellKey"],[24,29,16,27],[24,32,16,30],[24,36,16,34,"Map"],[24,39,16,37],[24,40,16,38],[24,41,16,39],[25,4,17,2],[26,4,17,3],[26,15,17,3,"_createClass2"],[26,28,17,3],[26,29,17,3,"default"],[26,36,17,3],[26,38,17,3,"ChildListCollection"],[26,57,17,3],[27,6,17,3,"key"],[27,9,17,3],[28,6,17,3,"value"],[28,11,17,3],[28,13,18,2],[28,22,18,2,"add"],[28,25,18,5,"add"],[28,26,18,6,"list"],[28,30,18,10],[28,32,18,12,"cellKey"],[28,39,18,19],[28,41,18,21],[29,8,19,4],[29,12,19,8,"_this$_cellKeyToChild"],[29,33,19,29],[30,8,20,4],[30,12,20,4,"invariant"],[30,30,20,13],[30,32,20,14],[30,33,20,15],[30,37,20,19],[30,38,20,20,"_childrenToCellKey"],[30,56,20,38],[30,57,20,39,"has"],[30,60,20,42],[30,61,20,43,"list"],[30,65,20,47],[30,66,20,48],[30,68,20,50],[30,110,20,92],[30,111,20,93],[31,8,21,4],[31,12,21,8,"cellLists"],[31,21,21,17],[31,24,21,20],[31,25,21,21,"_this$_cellKeyToChild"],[31,46,21,42],[31,49,21,45],[31,53,21,49],[31,54,21,50,"_cellKeyToChildren"],[31,72,21,68],[31,73,21,69,"get"],[31,76,21,72],[31,77,21,73,"cellKey"],[31,84,21,80],[31,85,21,81],[31,91,21,87],[31,95,21,91],[31,99,21,95,"_this$_cellKeyToChild"],[31,120,21,116],[31,125,21,121],[31,130,21,126],[31,131,21,127],[31,134,21,130,"_this$_cellKeyToChild"],[31,155,21,151],[31,158,21,154],[31,162,21,158,"Set"],[31,165,21,161],[31,166,21,162],[31,167,21,163],[32,8,22,4,"cellLists"],[32,17,22,13],[32,18,22,14,"add"],[32,21,22,17],[32,22,22,18,"list"],[32,26,22,22],[32,27,22,23],[33,8,23,4],[33,12,23,8],[33,13,23,9,"_cellKeyToChildren"],[33,31,23,27],[33,32,23,28,"set"],[33,35,23,31],[33,36,23,32,"cellKey"],[33,43,23,39],[33,45,23,41,"cellLists"],[33,54,23,50],[33,55,23,51],[34,8,24,4],[34,12,24,8],[34,13,24,9,"_childrenToCellKey"],[34,31,24,27],[34,32,24,28,"set"],[34,35,24,31],[34,36,24,32,"list"],[34,40,24,36],[34,42,24,38,"cellKey"],[34,49,24,45],[34,50,24,46],[35,6,25,2],[36,4,25,3],[37,6,25,3,"key"],[37,9,25,3],[38,6,25,3,"value"],[38,11,25,3],[38,13,26,2],[38,22,26,2,"remove"],[38,28,26,8,"remove"],[38,29,26,9,"list"],[38,33,26,13],[38,35,26,15],[39,8,27,4],[39,12,27,8,"cellKey"],[39,19,27,15],[39,22,27,18],[39,26,27,22],[39,27,27,23,"_childrenToCellKey"],[39,45,27,41],[39,46,27,42,"get"],[39,49,27,45],[39,50,27,46,"list"],[39,54,27,50],[39,55,27,51],[40,8,28,4],[40,12,28,4,"invariant"],[40,30,28,13],[40,32,28,14,"cellKey"],[40,39,28,21],[40,43,28,25],[40,47,28,29],[40,49,28,31],[40,90,28,72],[40,91,28,73],[41,8,29,4],[41,12,29,8],[41,13,29,9,"_childrenToCellKey"],[41,31,29,27],[41,32,29,28,"delete"],[41,38,29,34],[41,39,29,35,"list"],[41,43,29,39],[41,44,29,40],[42,8,30,4],[42,12,30,8,"cellLists"],[42,21,30,17],[42,24,30,20],[42,28,30,24],[42,29,30,25,"_cellKeyToChildren"],[42,47,30,43],[42,48,30,44,"get"],[42,51,30,47],[42,52,30,48,"cellKey"],[42,59,30,55],[42,60,30,56],[43,8,31,4],[43,12,31,4,"invariant"],[43,30,31,13],[43,32,31,14,"cellLists"],[43,41,31,23],[43,43,31,25],[43,86,31,68],[43,87,31,69],[44,8,32,4,"cellLists"],[44,17,32,13],[44,18,32,14,"delete"],[44,24,32,20],[44,25,32,21,"list"],[44,29,32,25],[44,30,32,26],[45,8,33,4],[45,12,33,8,"cellLists"],[45,21,33,17],[45,22,33,18,"size"],[45,26,33,22],[45,31,33,27],[45,32,33,28],[45,34,33,30],[46,10,34,6],[46,14,34,10],[46,15,34,11,"_cellKeyToChildren"],[46,33,34,29],[46,34,34,30,"delete"],[46,40,34,36],[46,41,34,37,"cellKey"],[46,48,34,44],[46,49,34,45],[47,8,35,4],[48,6,36,2],[49,4,36,3],[50,6,36,3,"key"],[50,9,36,3],[51,6,36,3,"value"],[51,11,36,3],[51,13,37,2],[51,22,37,2,"forEach"],[51,29,37,9,"forEach"],[51,30,37,10,"fn"],[51,32,37,12],[51,34,37,14],[52,8,38,4],[52,13,38,9],[52,17,38,13,"_iterator"],[52,26,38,22],[52,29,38,25],[52,33,38,25,"_createForOfIteratorHelperLoose"],[52,73,38,56],[52,75,38,57],[52,79,38,61],[52,80,38,62,"_cellKeyToChildren"],[52,98,38,80],[52,99,38,81,"values"],[52,105,38,87],[52,106,38,88],[52,107,38,89],[52,108,38,90],[52,110,38,92,"_step"],[52,115,38,97],[52,117,38,99],[52,118,38,100],[52,119,38,101,"_step"],[52,124,38,106],[52,127,38,109,"_iterator"],[52,136,38,118],[52,137,38,119],[52,138,38,120],[52,140,38,122,"done"],[52,144,38,126],[52,147,38,129],[53,10,39,6],[53,14,39,10,"listSet"],[53,21,39,17],[53,24,39,20,"_step"],[53,29,39,25],[53,30,39,26,"value"],[53,35,39,31],[54,10,40,6],[54,15,40,11],[54,19,40,15,"_iterator2"],[54,29,40,25],[54,32,40,28],[54,36,40,28,"_createForOfIteratorHelperLoose"],[54,76,40,59],[54,78,40,60,"listSet"],[54,85,40,67],[54,86,40,68],[54,88,40,70,"_step2"],[54,94,40,76],[54,96,40,78],[54,97,40,79],[54,98,40,80,"_step2"],[54,104,40,86],[54,107,40,89,"_iterator2"],[54,117,40,99],[54,118,40,100],[54,119,40,101],[54,121,40,103,"done"],[54,125,40,107],[54,128,40,110],[55,12,41,8],[55,16,41,12,"list"],[55,20,41,16],[55,23,41,19,"_step2"],[55,29,41,25],[55,30,41,26,"value"],[55,35,41,31],[56,12,42,8,"fn"],[56,14,42,10],[56,15,42,11,"list"],[56,19,42,15],[56,20,42,16],[57,10,43,6],[58,8,44,4],[59,6,45,2],[60,4,45,3],[61,6,45,3,"key"],[61,9,45,3],[62,6,45,3,"value"],[62,11,45,3],[62,13,46,2],[62,22,46,2,"forEachInCell"],[62,35,46,15,"forEachInCell"],[62,36,46,16,"cellKey"],[62,43,46,23],[62,45,46,25,"fn"],[62,47,46,27],[62,49,46,29],[63,8,47,4],[63,12,47,8,"_this$_cellKeyToChild2"],[63,34,47,30],[64,8,48,4],[64,12,48,8,"listSet"],[64,19,48,15],[64,22,48,18],[64,23,48,19,"_this$_cellKeyToChild2"],[64,45,48,41],[64,48,48,44],[64,52,48,48],[64,53,48,49,"_cellKeyToChildren"],[64,71,48,67],[64,72,48,68,"get"],[64,75,48,71],[64,76,48,72,"cellKey"],[64,83,48,79],[64,84,48,80],[64,90,48,86],[64,94,48,90],[64,98,48,94,"_this$_cellKeyToChild2"],[64,120,48,116],[64,125,48,121],[64,130,48,126],[64,131,48,127],[64,134,48,130,"_this$_cellKeyToChild2"],[64,156,48,152],[64,159,48,155],[64,161,48,157],[65,8,49,4],[65,13,49,9],[65,17,49,13,"_iterator3"],[65,27,49,23],[65,30,49,26],[65,34,49,26,"_createForOfIteratorHelperLoose"],[65,74,49,57],[65,76,49,58,"listSet"],[65,83,49,65],[65,84,49,66],[65,86,49,68,"_step3"],[65,92,49,74],[65,94,49,76],[65,95,49,77],[65,96,49,78,"_step3"],[65,102,49,84],[65,105,49,87,"_iterator3"],[65,115,49,97],[65,116,49,98],[65,117,49,99],[65,119,49,101,"done"],[65,123,49,105],[65,126,49,108],[66,10,50,6],[66,14,50,10,"list"],[66,18,50,14],[66,21,50,17,"_step3"],[66,27,50,23],[66,28,50,24,"value"],[66,33,50,29],[67,10,51,6,"fn"],[67,12,51,8],[67,13,51,9,"list"],[67,17,51,13],[67,18,51,14],[68,8,52,4],[69,6,53,2],[70,4,53,3],[71,6,53,3,"key"],[71,9,53,3],[72,6,53,3,"value"],[72,11,53,3],[72,13,54,2],[72,22,54,2,"anyInCell"],[72,31,54,11,"anyInCell"],[72,32,54,12,"cellKey"],[72,39,54,19],[72,41,54,21,"fn"],[72,43,54,23],[72,45,54,25],[73,8,55,4],[73,12,55,8,"_this$_cellKeyToChild3"],[73,34,55,30],[74,8,56,4],[74,12,56,8,"listSet"],[74,19,56,15],[74,22,56,18],[74,23,56,19,"_this$_cellKeyToChild3"],[74,45,56,41],[74,48,56,44],[74,52,56,48],[74,53,56,49,"_cellKeyToChildren"],[74,71,56,67],[74,72,56,68,"get"],[74,75,56,71],[74,76,56,72,"cellKey"],[74,83,56,79],[74,84,56,80],[74,90,56,86],[74,94,56,90],[74,98,56,94,"_this$_cellKeyToChild3"],[74,120,56,116],[74,125,56,121],[74,130,56,126],[74,131,56,127],[74,134,56,130,"_this$_cellKeyToChild3"],[74,156,56,152],[74,159,56,155],[74,161,56,157],[75,8,57,4],[75,13,57,9],[75,17,57,13,"_iterator4"],[75,27,57,23],[75,30,57,26],[75,34,57,26,"_createForOfIteratorHelperLoose"],[75,74,57,57],[75,76,57,58,"listSet"],[75,83,57,65],[75,84,57,66],[75,86,57,68,"_step4"],[75,92,57,74],[75,94,57,76],[75,95,57,77],[75,96,57,78,"_step4"],[75,102,57,84],[75,105,57,87,"_iterator4"],[75,115,57,97],[75,116,57,98],[75,117,57,99],[75,119,57,101,"done"],[75,123,57,105],[75,126,57,108],[76,10,58,6],[76,14,58,10,"list"],[76,18,58,14],[76,21,58,17,"_step4"],[76,27,58,23],[76,28,58,24,"value"],[76,33,58,29],[77,10,59,6],[77,14,59,10,"fn"],[77,16,59,12],[77,17,59,13,"list"],[77,21,59,17],[77,22,59,18],[77,24,59,20],[78,12,60,8],[78,19,60,15],[78,23,60,19],[79,10,61,6],[80,8,62,4],[81,8,63,4],[81,15,63,11],[81,20,63,16],[82,6,64,2],[83,4,64,3],[84,6,64,3,"key"],[84,9,64,3],[85,6,64,3,"value"],[85,11,64,3],[85,13,65,2],[85,22,65,2,"size"],[85,26,65,6,"size"],[85,27,65,6],[85,29,65,9],[86,8,66,4],[86,15,66,11],[86,19,66,15],[86,20,66,16,"_childrenToCellKey"],[86,38,66,34],[86,39,66,35,"size"],[86,43,66,39],[87,6,67,2],[88,4,67,3],[89,2,67,3],[90,0,67,3]],"functionMap":{"names":["<global>","ChildListCollection","constructor","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECC;GDG;EEC;GFO;EGC;GHU;EIC;GJQ;EKC;GLO;EMC;GNU;EOC;GPE"}},"type":"js/module"}]}