{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":67,"column":0,"index":2421}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":67,"column":0,"index":2421}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"DaTWSp7W8IZ8bPvM94IzOSvNQSs="}},{"name":"./constants.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":51,"index":144}}],"key":"0CDp4OIxpxzHKYXO2c/E0Fm3H6U="}},{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _getTimezoneOffsetInMilliseconds = _$$_REQUIRE(_dependencyMap[2], \"./_lib/getTimezoneOffsetInMilliseconds.js\");\n  var _constants = _$$_REQUIRE(_dependencyMap[3], \"./constants.js\");\n  var _toDate = _$$_REQUIRE(_dependencyMap[4], \"./toDate.js\");\n  /**\n   * @name getOverlappingDaysInIntervals\n   * @category Interval Helpers\n   * @summary Get the number of days that overlap in two time intervals\n   *\n   * @description\n   * Get the number of days that overlap in two time intervals. It uses the time\n   * between dates to calculate the number of days, rounding it up to include\n   * partial days.\n   *\n   * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n   * result in 1.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - An object with options\n   *\n   * @returns The number of days that overlap in two time intervals\n   *\n   * @example\n   * // For overlapping time intervals adds 1 for each started overlapping day:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> 3\n   *\n   * @example\n   * // For non-overlapping time intervals returns 0:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> 0\n   */\n\n  function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n    var _sort = [+(0, _toDate.toDate)(intervalLeft.start), +(0, _toDate.toDate)(intervalLeft.end)].sort(function (a, b) {\n        return a - b;\n      }),\n      _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n      leftStart = _sort2[0],\n      leftEnd = _sort2[1];\n    var _sort3 = [+(0, _toDate.toDate)(intervalRight.start), +(0, _toDate.toDate)(intervalRight.end)].sort(function (a, b) {\n        return a - b;\n      }),\n      _sort4 = (0, _slicedToArray2.default)(_sort3, 2),\n      rightStart = _sort4[0],\n      rightEnd = _sort4[1];\n\n    // Prevent NaN result if intervals don't overlap at all.\n    var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n    if (!isOverlapping) return 0;\n\n    // Remove the timezone offset to negate the DST effect on calculations.\n    var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n    var left = overlapLeft - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapLeft);\n    var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n    var right = overlapRight - (0, _getTimezoneOffsetInMilliseconds.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n    // Ceil the number to include partial days too.\n    return Math.ceil((right - left) / _constants.millisecondsInDay);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = getOverlappingDaysInIntervals;\n});","lineCount":78,"map":[[9,2,1,0],[9,6,1,0,"_getTimezoneOffsetInMilliseconds"],[9,38,1,0],[9,41,1,0,"_$$_REQUIRE"],[9,52,1,0],[9,53,1,0,"_dependencyMap"],[9,67,1,0],[10,2,2,0],[10,6,2,0,"_constants"],[10,16,2,0],[10,19,2,0,"_$$_REQUIRE"],[10,30,2,0],[10,31,2,0,"_dependencyMap"],[10,45,2,0],[11,2,3,0],[11,6,3,0,"_toDate"],[11,13,3,0],[11,16,3,0,"_$$_REQUIRE"],[11,27,3,0],[11,28,3,0,"_dependencyMap"],[11,42,3,0],[12,2,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[48,2,41,7],[48,11,41,16,"getOverlappingDaysInIntervals"],[48,40,41,45,"getOverlappingDaysInIntervals"],[48,41,41,46,"intervalLeft"],[48,53,41,58],[48,55,41,60,"intervalRight"],[48,68,41,73],[48,70,41,75],[49,4,42,2],[49,8,42,2,"_sort"],[49,13,42,2],[49,16,42,31],[49,17,43,4],[49,18,43,5],[49,22,43,5,"toDate"],[49,36,43,11],[49,38,43,12,"intervalLeft"],[49,50,43,24],[49,51,43,25,"start"],[49,56,43,30],[49,57,43,31],[49,59,44,4],[49,60,44,5],[49,64,44,5,"toDate"],[49,78,44,11],[49,80,44,12,"intervalLeft"],[49,92,44,24],[49,93,44,25,"end"],[49,96,44,28],[49,97,44,29],[49,98,45,3],[49,99,45,4,"sort"],[49,103,45,8],[49,104,45,9],[49,114,45,10,"a"],[49,115,45,11],[49,117,45,13,"b"],[49,118,45,14],[50,8,45,14],[50,15,45,19,"a"],[50,16,45,20],[50,19,45,23,"b"],[50,20,45,24],[51,6,45,24],[51,8,45,25],[52,6,45,25,"_sort2"],[52,12,45,25],[52,19,45,25,"_slicedToArray2"],[52,34,45,25],[52,35,45,25,"default"],[52,42,45,25],[52,44,45,25,"_sort"],[52,49,45,25],[53,6,42,9,"leftStart"],[53,15,42,18],[53,18,42,18,"_sort2"],[53,24,42,18],[54,6,42,20,"leftEnd"],[54,13,42,27],[54,16,42,27,"_sort2"],[54,22,42,27],[55,4,46,2],[55,8,46,2,"_sort3"],[55,14,46,2],[55,17,46,33],[55,18,47,4],[55,19,47,5],[55,23,47,5,"toDate"],[55,37,47,11],[55,39,47,12,"intervalRight"],[55,52,47,25],[55,53,47,26,"start"],[55,58,47,31],[55,59,47,32],[55,61,48,4],[55,62,48,5],[55,66,48,5,"toDate"],[55,80,48,11],[55,82,48,12,"intervalRight"],[55,95,48,25],[55,96,48,26,"end"],[55,99,48,29],[55,100,48,30],[55,101,49,3],[55,102,49,4,"sort"],[55,106,49,8],[55,107,49,9],[55,117,49,10,"a"],[55,118,49,11],[55,120,49,13,"b"],[55,121,49,14],[56,8,49,14],[56,15,49,19,"a"],[56,16,49,20],[56,19,49,23,"b"],[56,20,49,24],[57,6,49,24],[57,8,49,25],[58,6,49,25,"_sort4"],[58,12,49,25],[58,19,49,25,"_slicedToArray2"],[58,34,49,25],[58,35,49,25,"default"],[58,42,49,25],[58,44,49,25,"_sort3"],[58,50,49,25],[59,6,46,9,"rightStart"],[59,16,46,19],[59,19,46,19,"_sort4"],[59,25,46,19],[60,6,46,21,"rightEnd"],[60,14,46,29],[60,17,46,29,"_sort4"],[60,23,46,29],[62,4,51,2],[63,4,52,2],[63,8,52,8,"isOverlapping"],[63,21,52,21],[63,24,52,24,"leftStart"],[63,33,52,33],[63,36,52,36,"rightEnd"],[63,44,52,44],[63,48,52,48,"rightStart"],[63,58,52,58],[63,61,52,61,"leftEnd"],[63,68,52,68],[64,4,53,2],[64,8,53,6],[64,9,53,7,"isOverlapping"],[64,22,53,20],[64,24,53,22],[64,31,53,29],[64,32,53,30],[66,4,55,2],[67,4,56,2],[67,8,56,8,"overlapLeft"],[67,19,56,19],[67,22,56,22,"rightStart"],[67,32,56,32],[67,35,56,35,"leftStart"],[67,44,56,44],[67,47,56,47,"leftStart"],[67,56,56,56],[67,59,56,59,"rightStart"],[67,69,56,69],[68,4,57,2],[68,8,57,8,"left"],[68,12,57,12],[68,15,57,15,"overlapLeft"],[68,26,57,26],[68,29,57,29],[68,33,57,29,"getTimezoneOffsetInMilliseconds"],[68,97,57,60],[68,99,57,61,"overlapLeft"],[68,110,57,72],[68,111,57,73],[69,4,58,2],[69,8,58,8,"overlapRight"],[69,20,58,20],[69,23,58,23,"rightEnd"],[69,31,58,31],[69,34,58,34,"leftEnd"],[69,41,58,41],[69,44,58,44,"leftEnd"],[69,51,58,51],[69,54,58,54,"rightEnd"],[69,62,58,62],[70,4,59,2],[70,8,59,8,"right"],[70,13,59,13],[70,16,59,16,"overlapRight"],[70,28,59,28],[70,31,59,31],[70,35,59,31,"getTimezoneOffsetInMilliseconds"],[70,99,59,62],[70,101,59,63,"overlapRight"],[70,113,59,75],[70,114,59,76],[72,4,61,2],[73,4,62,2],[73,11,62,9,"Math"],[73,15,62,13],[73,16,62,14,"ceil"],[73,20,62,18],[73,21,62,19],[73,22,62,20,"right"],[73,27,62,25],[73,30,62,28,"left"],[73,34,62,32],[73,38,62,36,"millisecondsInDay"],[73,66,62,53],[73,67,62,54],[74,2,63,0],[76,2,65,0],[77,2,65,0],[77,6,65,0,"_default"],[77,14,65,0],[77,17,65,0,"exports"],[77,24,65,0],[77,25,65,0,"default"],[77,32,65,0],[77,35,66,15,"getOverlappingDaysInIntervals"],[77,64,66,44],[78,0,66,44]],"functionMap":{"names":["<global>","getOverlappingDaysInIntervals","sort$argument_0"],"mappings":"AAA;OCwC;SCI,eD;SCI,eD;CDc"}},"type":"js/module"}]}