{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":106,"column":1,"index":3809}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":106,"column":1,"index":3809}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":106,"column":1,"index":3809}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/objectSpread2","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"cO+kR170JcyEW83FKera/I0tgxg="}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":276},"end":{"line":12,"column":43,"index":319}}],"key":"avnjoAx2FQYjx6eZ7ALk+OuZk68="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/objectSpread2\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck2.default)(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return (0, _createClass2.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n        // VirtualizedList uses inclusive ranges, where zero-count states are\n        // possible. E.g. [0, -1] for no cells, starting at 0.\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          firstIntersect = _this$_findRegion[0],\n          firstIntersectIdx = _this$_findRegion[1];\n        var _this$_findRegion2 = this._findRegion(cells.last),\n          lastIntersect = _this$_findRegion2[0],\n          lastIntersectIdx = _this$_findRegion2[1];\n\n        // Fast-path if the cells to add are already all present in the mask. We\n        // will otherwise need to do some mutation.\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n\n        // We need to replace the existing covered regions with 1-3 new regions\n        // depending whether we need to split spacers out of overlapping regions.\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cells), {}, {\n          isSpacer: false\n        });\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n        });\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n      }\n    }]);\n  }();\n});","lineCount":128,"map":[[9,2,1,0],[9,6,1,0,"_objectSpread2"],[9,20,1,0],[9,23,1,0,"_interopRequireDefault"],[9,45,1,0],[9,46,1,0,"_$$_REQUIRE"],[9,57,1,0],[9,58,1,0,"_dependencyMap"],[9,72,1,0],[10,2,12,0],[10,6,12,0,"_invariant"],[10,16,12,0],[10,19,12,0,"_interopRequireDefault"],[10,41,12,0],[10,42,12,0,"_$$_REQUIRE"],[10,53,12,0],[10,54,12,0,"_dependencyMap"],[10,68,12,0],[11,2,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,0,10,0],[20,2,2,0],[20,6,13,13,"CellRenderMask"],[20,20,13,27],[20,23,13,27,"exports"],[20,30,13,27],[20,31,13,27,"CellRenderMask"],[20,45,13,27],[21,4,14,2],[21,13,14,2,"CellRenderMask"],[21,28,14,14,"numCells"],[21,36,14,22],[21,38,14,24],[22,6,14,24],[22,10,14,24,"_classCallCheck2"],[22,26,14,24],[22,27,14,24,"default"],[22,34,14,24],[22,42,14,24,"CellRenderMask"],[22,56,14,24],[23,6,15,4],[23,10,15,4,"invariant"],[23,28,15,13],[23,30,15,14,"numCells"],[23,38,15,22],[23,42,15,26],[23,43,15,27],[23,45,15,29],[23,105,15,89],[23,106,15,90],[24,6,16,4],[24,10,16,8],[24,11,16,9,"_numCells"],[24,20,16,18],[24,23,16,21,"numCells"],[24,31,16,29],[25,6,17,4],[25,10,17,8,"numCells"],[25,18,17,16],[25,23,17,21],[25,24,17,22],[25,26,17,24],[26,8,18,6],[26,12,18,10],[26,13,18,11,"_regions"],[26,21,18,19],[26,24,18,22],[26,26,18,24],[27,6,19,4],[27,7,19,5],[27,13,19,11],[28,8,20,6],[28,12,20,10],[28,13,20,11,"_regions"],[28,21,20,19],[28,24,20,22],[28,25,20,23],[29,10,21,8,"first"],[29,15,21,13],[29,17,21,15],[29,18,21,16],[30,10,22,8,"last"],[30,14,22,12],[30,16,22,14,"numCells"],[30,24,22,22],[30,27,22,25],[30,28,22,26],[31,10,23,8,"isSpacer"],[31,18,23,16],[31,20,23,18],[32,8,24,6],[32,9,24,7],[32,10,24,8],[33,6,25,4],[34,4,26,2],[35,4,26,3],[35,15,26,3,"_createClass2"],[35,28,26,3],[35,29,26,3,"default"],[35,36,26,3],[35,38,26,3,"CellRenderMask"],[35,52,26,3],[36,6,26,3,"key"],[36,9,26,3],[37,6,26,3,"value"],[37,11,26,3],[37,13,27,2],[37,22,27,2,"enumerateRegions"],[37,38,27,18,"enumerateRegions"],[37,39,27,18],[37,41,27,21],[38,8,28,4],[38,15,28,11],[38,19,28,15],[38,20,28,16,"_regions"],[38,28,28,24],[39,6,29,2],[40,4,29,3],[41,6,29,3,"key"],[41,9,29,3],[42,6,29,3,"value"],[42,11,29,3],[42,13,30,2],[42,22,30,2,"addCells"],[42,30,30,10,"addCells"],[42,31,30,11,"cells"],[42,36,30,16],[42,38,30,18],[43,8,31,4],[43,12,31,4,"invariant"],[43,30,31,13],[43,32,31,14,"cells"],[43,37,31,19],[43,38,31,20,"first"],[43,43,31,25],[43,47,31,29],[43,48,31,30],[43,52,31,34,"cells"],[43,57,31,39],[43,58,31,40,"first"],[43,63,31,45],[43,66,31,48],[43,70,31,52],[43,71,31,53,"_numCells"],[43,80,31,62],[43,84,31,66,"cells"],[43,89,31,71],[43,90,31,72,"last"],[43,94,31,76],[43,98,31,80],[43,99,31,81],[43,100,31,82],[43,104,31,86,"cells"],[43,109,31,91],[43,110,31,92,"last"],[43,114,31,96],[43,117,31,99],[43,121,31,103],[43,122,31,104,"_numCells"],[43,131,31,113],[43,135,31,117,"cells"],[43,140,31,122],[43,141,31,123,"last"],[43,145,31,127],[43,149,31,131,"cells"],[43,154,31,136],[43,155,31,137,"first"],[43,160,31,142],[43,163,31,145],[43,164,31,146],[43,166,31,148],[43,222,31,204],[43,223,31,205],[45,8,33,4],[46,8,34,4],[47,8,35,4],[47,12,35,8,"cells"],[47,17,35,13],[47,18,35,14,"last"],[47,22,35,18],[47,25,35,21,"cells"],[47,30,35,26],[47,31,35,27,"first"],[47,36,35,32],[47,38,35,34],[48,10,36,6],[49,8,37,4],[50,8,38,4],[50,12,38,8,"_this$_findRegion"],[50,29,38,25],[50,32,38,28],[50,36,38,32],[50,37,38,33,"_findRegion"],[50,48,38,44],[50,49,38,45,"cells"],[50,54,38,50],[50,55,38,51,"first"],[50,60,38,56],[50,61,38,57],[51,10,39,6,"firstIntersect"],[51,24,39,20],[51,27,39,23,"_this$_findRegion"],[51,44,39,40],[51,45,39,41],[51,46,39,42],[51,47,39,43],[52,10,40,6,"firstIntersectIdx"],[52,27,40,23],[52,30,40,26,"_this$_findRegion"],[52,47,40,43],[52,48,40,44],[52,49,40,45],[52,50,40,46],[53,8,41,4],[53,12,41,8,"_this$_findRegion2"],[53,30,41,26],[53,33,41,29],[53,37,41,33],[53,38,41,34,"_findRegion"],[53,49,41,45],[53,50,41,46,"cells"],[53,55,41,51],[53,56,41,52,"last"],[53,60,41,56],[53,61,41,57],[54,10,42,6,"lastIntersect"],[54,23,42,19],[54,26,42,22,"_this$_findRegion2"],[54,44,42,40],[54,45,42,41],[54,46,42,42],[54,47,42,43],[55,10,43,6,"lastIntersectIdx"],[55,26,43,22],[55,29,43,25,"_this$_findRegion2"],[55,47,43,43],[55,48,43,44],[55,49,43,45],[55,50,43,46],[57,8,45,4],[58,8,46,4],[59,8,47,4],[59,12,47,8,"firstIntersectIdx"],[59,29,47,25],[59,34,47,30,"lastIntersectIdx"],[59,50,47,46],[59,54,47,50],[59,55,47,51,"firstIntersect"],[59,69,47,65],[59,70,47,66,"isSpacer"],[59,78,47,74],[59,80,47,76],[60,10,48,6],[61,8,49,4],[63,8,51,4],[64,8,52,4],[65,8,53,4],[65,12,53,8,"newLeadRegion"],[65,25,53,21],[65,28,53,24],[65,30,53,26],[66,8,54,4],[66,12,54,8,"newTailRegion"],[66,25,54,21],[66,28,54,24],[66,30,54,26],[67,8,55,4],[67,12,55,8,"newMainRegion"],[67,25,55,21],[67,28,55,24],[67,32,55,24,"_objectSpread"],[67,54,55,37],[67,56,55,38],[67,60,55,38,"_objectSpread"],[67,82,55,51],[67,84,55,52],[67,85,55,53],[67,86,55,54],[67,88,55,56,"cells"],[67,93,55,61],[67,94,55,62],[67,96,55,64],[67,97,55,65],[67,98,55,66],[67,100,55,68],[68,10,56,6,"isSpacer"],[68,18,56,14],[68,20,56,16],[69,8,57,4],[69,9,57,5],[69,10,57,6],[70,8,58,4],[70,12,58,8,"firstIntersect"],[70,26,58,22],[70,27,58,23,"first"],[70,32,58,28],[70,35,58,31,"newMainRegion"],[70,48,58,44],[70,49,58,45,"first"],[70,54,58,50],[70,56,58,52],[71,10,59,6],[71,14,59,10,"firstIntersect"],[71,28,59,24],[71,29,59,25,"isSpacer"],[71,37,59,33],[71,39,59,35],[72,12,60,8,"newLeadRegion"],[72,25,60,21],[72,26,60,22,"push"],[72,30,60,26],[72,31,60,27],[73,14,61,10,"first"],[73,19,61,15],[73,21,61,17,"firstIntersect"],[73,35,61,31],[73,36,61,32,"first"],[73,41,61,37],[74,14,62,10,"last"],[74,18,62,14],[74,20,62,16,"newMainRegion"],[74,33,62,29],[74,34,62,30,"first"],[74,39,62,35],[74,42,62,38],[74,43,62,39],[75,14,63,10,"isSpacer"],[75,22,63,18],[75,24,63,20],[76,12,64,8],[76,13,64,9],[76,14,64,10],[77,10,65,6],[77,11,65,7],[77,17,65,13],[78,12,66,8,"newMainRegion"],[78,25,66,21],[78,26,66,22,"first"],[78,31,66,27],[78,34,66,30,"firstIntersect"],[78,48,66,44],[78,49,66,45,"first"],[78,54,66,50],[79,10,67,6],[80,8,68,4],[81,8,69,4],[81,12,69,8,"lastIntersect"],[81,25,69,21],[81,26,69,22,"last"],[81,30,69,26],[81,33,69,29,"newMainRegion"],[81,46,69,42],[81,47,69,43,"last"],[81,51,69,47],[81,53,69,49],[82,10,70,6],[82,14,70,10,"lastIntersect"],[82,27,70,23],[82,28,70,24,"isSpacer"],[82,36,70,32],[82,38,70,34],[83,12,71,8,"newTailRegion"],[83,25,71,21],[83,26,71,22,"push"],[83,30,71,26],[83,31,71,27],[84,14,72,10,"first"],[84,19,72,15],[84,21,72,17,"newMainRegion"],[84,34,72,30],[84,35,72,31,"last"],[84,39,72,35],[84,42,72,38],[84,43,72,39],[85,14,73,10,"last"],[85,18,73,14],[85,20,73,16,"lastIntersect"],[85,33,73,29],[85,34,73,30,"last"],[85,38,73,34],[86,14,74,10,"isSpacer"],[86,22,74,18],[86,24,74,20],[87,12,75,8],[87,13,75,9],[87,14,75,10],[88,10,76,6],[88,11,76,7],[88,17,76,13],[89,12,77,8,"newMainRegion"],[89,25,77,21],[89,26,77,22,"last"],[89,30,77,26],[89,33,77,29,"lastIntersect"],[89,46,77,42],[89,47,77,43,"last"],[89,51,77,47],[90,10,78,6],[91,8,79,4],[92,8,80,4],[92,12,80,8,"replacementRegions"],[92,30,80,26],[92,33,80,29],[92,34,80,30],[92,37,80,33,"newLeadRegion"],[92,50,80,46],[92,52,80,48,"newMainRegion"],[92,65,80,61],[92,67,80,63],[92,70,80,66,"newTailRegion"],[92,83,80,79],[92,84,80,80],[93,8,81,4],[93,12,81,8,"numRegionsToDelete"],[93,30,81,26],[93,33,81,29,"lastIntersectIdx"],[93,49,81,45],[93,52,81,48,"firstIntersectIdx"],[93,69,81,65],[93,72,81,68],[93,73,81,69],[94,8,82,4],[94,12,82,8],[94,13,82,9,"_regions"],[94,21,82,17],[94,22,82,18,"splice"],[94,28,82,24],[94,29,82,25,"firstIntersectIdx"],[94,46,82,42],[94,48,82,44,"numRegionsToDelete"],[94,66,82,62],[94,68,82,64],[94,71,82,67,"replacementRegions"],[94,89,82,85],[94,90,82,86],[95,6,83,2],[96,4,83,3],[97,6,83,3,"key"],[97,9,83,3],[98,6,83,3,"value"],[98,11,83,3],[98,13,84,2],[98,22,84,2,"numCells"],[98,30,84,10,"numCells"],[98,31,84,10],[98,33,84,13],[99,8,85,4],[99,15,85,11],[99,19,85,15],[99,20,85,16,"_numCells"],[99,29,85,25],[100,6,86,2],[101,4,86,3],[102,6,86,3,"key"],[102,9,86,3],[103,6,86,3,"value"],[103,11,86,3],[103,13,87,2],[103,22,87,2,"equals"],[103,28,87,8,"equals"],[103,29,87,9,"other"],[103,34,87,14],[103,36,87,16],[104,8,88,4],[104,15,88,11],[104,19,88,15],[104,20,88,16,"_numCells"],[104,29,88,25],[104,34,88,30,"other"],[104,39,88,35],[104,40,88,36,"_numCells"],[104,49,88,45],[104,53,88,49],[104,57,88,53],[104,58,88,54,"_regions"],[104,66,88,62],[104,67,88,63,"length"],[104,73,88,69],[104,78,88,74,"other"],[104,83,88,79],[104,84,88,80,"_regions"],[104,92,88,88],[104,93,88,89,"length"],[104,99,88,95],[104,103,88,99],[104,107,88,103],[104,108,88,104,"_regions"],[104,116,88,112],[104,117,88,113,"every"],[104,122,88,118],[104,123,88,119],[104,133,88,120,"region"],[104,139,88,126],[104,141,88,128,"i"],[104,142,88,129],[105,10,88,129],[105,17,88,134,"region"],[105,23,88,140],[105,24,88,141,"first"],[105,29,88,146],[105,34,88,151,"other"],[105,39,88,156],[105,40,88,157,"_regions"],[105,48,88,165],[105,49,88,166,"i"],[105,50,88,167],[105,51,88,168],[105,52,88,169,"first"],[105,57,88,174],[105,61,88,178,"region"],[105,67,88,184],[105,68,88,185,"last"],[105,72,88,189],[105,77,88,194,"other"],[105,82,88,199],[105,83,88,200,"_regions"],[105,91,88,208],[105,92,88,209,"i"],[105,93,88,210],[105,94,88,211],[105,95,88,212,"last"],[105,99,88,216],[105,103,88,220,"region"],[105,109,88,226],[105,110,88,227,"isSpacer"],[105,118,88,235],[105,123,88,240,"other"],[105,128,88,245],[105,129,88,246,"_regions"],[105,137,88,254],[105,138,88,255,"i"],[105,139,88,256],[105,140,88,257],[105,141,88,258,"isSpacer"],[105,149,88,266],[106,8,88,266],[106,10,88,267],[107,6,89,2],[108,4,89,3],[109,6,89,3,"key"],[109,9,89,3],[110,6,89,3,"value"],[110,11,89,3],[110,13,90,2],[110,22,90,2,"_findRegion"],[110,33,90,13,"_findRegion"],[110,34,90,14,"cellIdx"],[110,41,90,21],[110,43,90,23],[111,8,91,4],[111,12,91,8,"firstIdx"],[111,20,91,16],[111,23,91,19],[111,24,91,20],[112,8,92,4],[112,12,92,8,"lastIdx"],[112,19,92,15],[112,22,92,18],[112,26,92,22],[112,27,92,23,"_regions"],[112,35,92,31],[112,36,92,32,"length"],[112,42,92,38],[112,45,92,41],[112,46,92,42],[113,8,93,4],[113,15,93,11,"firstIdx"],[113,23,93,19],[113,27,93,23,"lastIdx"],[113,34,93,30],[113,36,93,32],[114,10,94,6],[114,14,94,10,"middleIdx"],[114,23,94,19],[114,26,94,22,"Math"],[114,30,94,26],[114,31,94,27,"floor"],[114,36,94,32],[114,37,94,33],[114,38,94,34,"firstIdx"],[114,46,94,42],[114,49,94,45,"lastIdx"],[114,56,94,52],[114,60,94,56],[114,61,94,57],[114,62,94,58],[115,10,95,6],[115,14,95,10,"middleRegion"],[115,26,95,22],[115,29,95,25],[115,33,95,29],[115,34,95,30,"_regions"],[115,42,95,38],[115,43,95,39,"middleIdx"],[115,52,95,48],[115,53,95,49],[116,10,96,6],[116,14,96,10,"cellIdx"],[116,21,96,17],[116,25,96,21,"middleRegion"],[116,37,96,33],[116,38,96,34,"first"],[116,43,96,39],[116,47,96,43,"cellIdx"],[116,54,96,50],[116,58,96,54,"middleRegion"],[116,70,96,66],[116,71,96,67,"last"],[116,75,96,71],[116,77,96,73],[117,12,97,8],[117,19,97,15],[117,20,97,16,"middleRegion"],[117,32,97,28],[117,34,97,30,"middleIdx"],[117,43,97,39],[117,44,97,40],[118,10,98,6],[118,11,98,7],[118,17,98,13],[118,21,98,17,"cellIdx"],[118,28,98,24],[118,31,98,27,"middleRegion"],[118,43,98,39],[118,44,98,40,"first"],[118,49,98,45],[118,51,98,47],[119,12,99,8,"lastIdx"],[119,19,99,15],[119,22,99,18,"middleIdx"],[119,31,99,27],[119,34,99,30],[119,35,99,31],[120,10,100,6],[120,11,100,7],[120,17,100,13],[120,21,100,17,"cellIdx"],[120,28,100,24],[120,31,100,27,"middleRegion"],[120,43,100,39],[120,44,100,40,"last"],[120,48,100,44],[120,50,100,46],[121,12,101,8,"firstIdx"],[121,20,101,16],[121,23,101,19,"middleIdx"],[121,32,101,28],[121,35,101,31],[121,36,101,32],[122,10,102,6],[123,8,103,4],[124,8,104,4],[124,12,104,4,"invariant"],[124,30,104,13],[124,32,104,14],[124,37,104,19],[124,39,104,21],[124,83,104,65],[124,86,104,68,"cellIdx"],[124,93,104,75],[124,94,104,76],[125,6,105,2],[126,4,105,3],[127,2,105,3],[128,0,105,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCY;ECC;GDY;EEC;GFE;EGC;GHqD;EIC;GJE;EKC;uHCC,mJD;GLC;EOC;GPe"}},"type":"js/module"}]}