<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MHT Assessment - Complete Interactive App</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #FFF0F5;
            height: 100vh;
            overflow: hidden;
        }
        
        .app-container {
            max-width: 390px;
            margin: 0 auto;
            background: white;
            height: 100vh;
            overflow-y: auto;
            border-left: 1px solid #e0e0e0;
            border-right: 1px solid #e0e0e0;
        }
        
        .header {
            background: #D81B60;
            color: white;
            padding: 20px;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 100;
            position: relative;
        }
        
        .back-button {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 18px;
            color: #D81B60;
            cursor: pointer;
            font-weight: bold;
        }
        
        .header h1 {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .content {
            padding: 20px;
            padding-bottom: 100px;
        }
        
        .navigation-bar {
            position: fixed;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            max-width: 390px;
            width: 100%;
            background: white;
            border-top: 1px solid #e0e0e0;
            padding: 12px;
            display: flex;
            justify-content: space-around;
            z-index: 100;
        }
        
        .nav-button {
            background: none;
            border: none;
            color: #666;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            padding: 8px;
            border-radius: 8px;
        }
        
        .nav-button.active {
            color: #D81B60;
            background: #FFF0F5;
        }
        
        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #D81B60;
        }
        
        .form-select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            background: white;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: #f9f9f9;
            border-radius: 8px;
            margin-bottom: 8px;
        }
        
        .checkbox {
            width: 20px;
            height: 20px;
            accent-color: #D81B60;
        }
        
        .primary-button {
            background: #D81B60;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
        }
        
        .secondary-button {
            background: white;
            color: #D81B60;
            border: 2px solid #FFC1CC;
            padding: 16px 24px;
            border-radius: 12px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            margin-bottom: 12px;
        }
        
        /* VAS Scale */
        .vas-scale {
            margin: 20px 0;
        }
        
        .vas-item {
            margin-bottom: 24px;
            padding: 16px;
            background: #f9f9f9;
            border-radius: 12px;
        }
        
        .vas-label {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 12px;
        }
        
        .vas-slider {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: #e0e0e0;
            outline: none;
            -webkit-appearance: none;
            appearance: none;
        }
        
        .vas-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #D81B60;
            cursor: pointer;
        }
        
        .vas-scale-labels {
            display: flex;
            justify-content: space-between;
            margin-top: 8px;
            font-size: 12px;
            color: #666;
        }
        
        .vas-value {
            text-align: center;
            margin-top: 8px;
            font-weight: bold;
            color: #D81B60;
        }
        
        /* Results Styles */
        .section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 16px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
        }
        
        .section-header {
            display: flex;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .section-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-left: 8px;
        }
        
        .calculator-section {
            margin-bottom: 20px;
        }
        
        .calculator-title {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 12px;
        }
        
        .calculator-grid {
            display: flex;
            gap: 12px;
        }
        
        .calculator-item {
            flex: 1;
            background: #f9f9f9;
            padding: 16px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid #e0e0e0;
        }
        
        .calculator-label {
            font-size: 12px;
            color: #666;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .calculator-value {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            margin-bottom: 4px;
        }
        
        .calculator-category {
            font-size: 12px;
            font-weight: 600;
            padding: 2px 8px;
            border-radius: 12px;
            display: inline-block;
        }
        
        .category-low { background-color: #e8f5e8; color: #2e7d32; }
        .category-moderate { background-color: #fff3e0; color: #f57c00; }
        .category-high { background-color: #ffebee; color: #d32f2f; }
        
        .alert-item {
            display: flex;
            padding: 16px;
            border-radius: 10px;
            margin-bottom: 12px;
            border: 1px solid;
        }
        
        .alert-relative {
            background-color: #fff3e0;
            border-color: #FF9800;
        }
        
        .alert-absolute {
            background-color: #ffebee;
            border-color: #F44336;
        }
        
        .alert-content {
            flex: 1;
            margin-left: 12px;
        }
        
        .alert-title {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 4px;
            color: #333;
        }
        
        .alert-message {
            font-size: 13px;
            color: #666;
            line-height: 1.4;
        }
        
        .recommendation-item {
            background: #f9f9f9;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 8px;
            border-left: 4px solid #2196F3;
        }
        
        .patient-list-item {
            background: white;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            border: 1px solid #e0e0e0;
            cursor: pointer;
        }
        
        .patient-name {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }
        
        .patient-details {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }
        
        .delete-button {
            background: #F44336;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            margin: 20px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: #D81B60;
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        
        .step-indicator {
            text-align: center;
            margin-bottom: 20px;
            font-size: 14px;
            color: #666;
        }
    </style>
</head>
<body>
    <div id="app"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Medical Calculators (simplified versions)
        const calculateFraminghamRisk = (patient) => {
            let points = 0;
            // Age points
            if (patient.age >= 45 && patient.age < 55) points += 3;
            else if (patient.age >= 55 && patient.age < 65) points += 8;
            else if (patient.age >= 65) points += 12;
            
            // Risk factors
            if (patient.smoking) points += 9;
            if (patient.diabetes) points += 6;
            if (patient.hypertension) points += 6;
            if (patient.cholesterolHigh) points += 4;
            
            let risk = Math.min(points * 1.2, 30);
            return {
                risk: Math.round(risk * 10) / 10,
                category: risk < 10 ? 'Low' : risk < 20 ? 'Intermediate' : 'High'
            };
        };

        const calculateASCVDRisk = (patient) => {
            let risk = Math.max(1, (patient.age - 40) * 0.8);
            if (patient.smoking) risk *= 1.5;
            if (patient.diabetes) risk *= 1.8;
            if (patient.hypertension) risk *= 1.3;
            
            risk = Math.min(risk, 40);
            return {
                risk: Math.round(risk * 10) / 10,
                category: risk < 5 ? 'Low' : risk < 7.5 ? 'Borderline' : risk < 20 ? 'Intermediate' : 'High'
            };
        };

        const calculateGailRisk = (patient) => {
            let risk = 0.5;
            if (patient.age >= 50) risk += 1.2;
            if (patient.age >= 60) risk += 0.8;
            if (patient.familyHistoryBreastCancer) risk *= 2.3;
            if (patient.personalHistoryBreastCancer) return { risk: 15, category: 'High' };
            
            return {
                risk: Math.round(risk * 10) / 10,
                category: risk < 1.7 ? 'Low' : risk < 3.0 ? 'Moderate' : 'High'
            };
        };

        const calculateTyrerCuzickRisk = (patient) => {
            let risk = patient.age >= 50 ? 2.4 : 1.2;
            if (patient.familyHistoryBreastCancer) risk *= 2.5;
            if (patient.bmi > 30) risk *= 1.3;
            
            return {
                risk: Math.round(risk * 10) / 10,
                category: risk < 2.0 ? 'Low' : risk < 5.0 ? 'Moderate' : 'High'
            };
        };

        const calculateWellsScore = (patient) => {
            let score = 0;
            if (patient.personalHistoryDVT) score += 3;
            if (patient.thrombophilia) score += 3;
            if (patient.diabetes || patient.hypertension) score += 1.5;
            
            return {
                score: Math.round(score),
                category: score <= 4 ? 'Low' : score <= 6 ? 'Moderate' : 'High'
            };
        };

        const calculateFRAXRisk = (patient) => {
            let risk = Math.max(1, (patient.age - 50) * 0.3);
            if (patient.smoking) risk *= 1.6;
            if (patient.hysterectomy) risk *= 1.4;
            if (patient.bmi < 20) risk *= 1.5;
            
            return {
                majorFractureRisk: Math.round(risk * 10) / 10,
                category: risk < 10 ? 'Low' : risk < 20 ? 'Moderate' : 'High'
            };
        };

        function CompleteMHTApp() {
            const [currentScreen, setCurrentScreen] = useState('home');
            const [patients, setPatients] = useState([]);
            const [currentPatient, setCurrentPatient] = useState(null);
            const [assessmentStep, setAssessmentStep] = useState(1);
            const [patientData, setPatientData] = useState({
                name: '',
                age: '',
                weight: '',
                height: '',
                menopausalStatus: 'postmenopausal',
                smoking: false,
                diabetes: false,
                hypertension: false,
                cholesterolHigh: false,
                familyHistoryBreastCancer: false,
                personalHistoryBreastCancer: false,
                personalHistoryDVT: false,
                thrombophilia: false,
                hysterectomy: false,
                // Symptoms (VAS 0-6 scale)
                hotFlashes: 0,
                nightSweats: 0,
                sleepDisturbance: 0,
                vaginalDryness: 0,
                moodChanges: 0,
                jointAches: 0
            });
            
            const [riskResults, setRiskResults] = useState(null);

            const calculateBMI = (weight, height) => {
                if (!weight || !height) return null;
                const bmi = weight / ((height / 100) ** 2);
                return Math.round(bmi * 10) / 10;
            };

            const calculateAllRisks = (patient) => {
                const patientWithBMI = {
                    ...patient,
                    age: parseInt(patient.age),
                    weight: parseFloat(patient.weight),
                    height: parseFloat(patient.height),
                    bmi: calculateBMI(parseFloat(patient.weight), parseFloat(patient.height))
                };

                return {
                    framingham: calculateFraminghamRisk(patientWithBMI),
                    ascvd: calculateASCVDRisk(patientWithBMI),
                    gail: calculateGailRisk(patientWithBMI),
                    tyrerCuzick: calculateTyrerCuzickRisk(patientWithBMI),
                    wells: calculateWellsScore(patientWithBMI),
                    frax: calculateFRAXRisk(patientWithBMI)
                };
            };

            const savePatient = () => {
                const newPatient = {
                    id: Date.now(),
                    ...patientData,
                    createdAt: new Date(),
                    bmi: calculateBMI(parseFloat(patientData.weight), parseFloat(patientData.height))
                };
                
                const risks = calculateAllRisks(newPatient);
                newPatient.risks = risks;
                
                setPatients(prev => [...prev, newPatient]);
                setRiskResults(risks);
                setCurrentPatient(newPatient);
            };

            const deletePatient = (id) => {
                setPatients(prev => prev.filter(p => p.id !== id));
            };

            const startNewAssessment = () => {
                setPatientData({
                    name: '',
                    age: '',
                    weight: '',
                    height: '',
                    menopausalStatus: 'postmenopausal',
                    smoking: false,
                    diabetes: false,
                    hypertension: false,
                    cholesterolHigh: false,
                    familyHistoryBreastCancer: false,
                    personalHistoryBreastCancer: false,
                    personalHistoryDVT: false,
                    thrombophilia: false,
                    hysterectomy: false,
                    hotFlashes: 0,
                    nightSweats: 0,
                    sleepDisturbance: 0,
                    vaginalDryness: 0,
                    moodChanges: 0,
                    jointAches: 0
                });
                setAssessmentStep(1);
                setCurrentScreen('assessment');
            };

            const nextStep = () => {
                if (assessmentStep < 4) {
                    setAssessmentStep(assessmentStep + 1);
                } else {
                    // Calculate results and save patient
                    savePatient();
                    setCurrentScreen('results');
                }
            };

            const getCategoryStyle = (category) => {
                switch (category?.toLowerCase()) {
                    case 'low': return 'category-low';
                    case 'moderate':
                    case 'intermediate':
                    case 'borderline': return 'category-moderate';
                    case 'high': return 'category-high';
                    default: return 'category-moderate';
                }
            };

            const getContraindications = (patient) => {
                const alerts = [];
                
                if (patient.personalHistoryBreastCancer) {
                    alerts.push({
                        type: 'absolute',
                        title: 'CONTRAINDICATION: Personal History of Breast Cancer',
                        message: 'HRT is absolutely contraindicated in patients with a personal history of breast cancer.'
                    });
                }
                
                if (patient.personalHistoryDVT) {
                    alerts.push({
                        type: 'absolute',
                        title: 'CONTRAINDICATION: Personal History of VTE',
                        message: 'HRT is contraindicated due to previous venous thromboembolism.'
                    });
                }
                
                if (patient.familyHistoryBreastCancer) {
                    alerts.push({
                        type: 'relative',
                        title: 'CAUTION: Family History of Breast Cancer',
                        message: 'Strong family history increases risk with HRT use. Consider genetic counseling.'
                    });
                }
                
                if (patient.smoking) {
                    alerts.push({
                        type: 'relative',
                        title: 'CAUTION: Current Smoking',
                        message: 'Smoking increases cardiovascular and VTE risks with HRT.'
                    });
                }
                
                if (patient.hypertension) {
                    alerts.push({
                        type: 'relative',
                        title: 'CAUTION: Hypertension',
                        message: 'Ensure optimal BP control before initiating HRT.'
                    });
                }
                
                return alerts;
            };

            const renderNavigation = () => (
                <div className="navigation-bar">
                    <button 
                        className={`nav-button ${currentScreen === 'home' ? 'active' : ''}`}
                        onClick={() => setCurrentScreen('home')}
                    >
                        <span>🏠</span>
                        <span>Home</span>
                    </button>
                    <button 
                        className={`nav-button ${currentScreen === 'patients' ? 'active' : ''}`}
                        onClick={() => setCurrentScreen('patients')}
                    >
                        <span>👥</span>
                        <span>Patients</span>
                    </button>
                    <button 
                        className={`nav-button ${currentScreen === 'guidelines' ? 'active' : ''}`}
                        onClick={() => setCurrentScreen('guidelines')}
                    >
                        <span>📚</span>
                        <span>Guidelines</span>
                    </button>
                    <button 
                        className={`nav-button ${currentScreen === 'cme' ? 'active' : ''}`}
                        onClick={() => setCurrentScreen('cme')}
                    >
                        <span>🎓</span>
                        <span>CME</span>
                    </button>
                </div>
            );

            const renderHomeScreen = () => (
                <div>
                    <div style={{textAlign: 'center', padding: '40px 20px'}}>
                        <div style={{
                            background: 'white',
                            borderRadius: '50%',
                            width: '100px',
                            height: '100px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            margin: '0 auto 20px',
                            boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
                            fontSize: '40px'
                        }}>🏥</div>
                        <h2 style={{color: '#D81B60', marginBottom: '8px'}}>MHT Assessment</h2>
                        <p style={{color: '#666', lineHeight: '1.4'}}>
                            Professional clinical decision support for menopausal hormone therapy
                        </p>
                    </div>
                    
                    <button className="primary-button" onClick={startNewAssessment}>
                        📝 Start New Assessment
                    </button>
                    <button className="secondary-button" onClick={() => setCurrentScreen('patients')}>
                        👥 Patient Records ({patients.length})
                    </button>
                    <button className="secondary-button" onClick={() => setCurrentScreen('guidelines')}>
                        📚 MHT Guidelines
                    </button>
                    <button className="secondary-button" onClick={() => setCurrentScreen('cme')}>
                        🎓 CME Mode
                    </button>
                </div>
            );

            const renderAssessmentScreen = () => {
                const progress = (assessmentStep / 4) * 100;
                
                return (
                    <div>
                        <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                        
                        <div className="step-indicator">
                            Step {assessmentStep} of 4
                        </div>
                        
                        <div className="progress-bar">
                            <div className="progress-fill" style={{width: `${progress}%`}}></div>
                        </div>

                        {assessmentStep === 1 && (
                            <div>
                                <h3 style={{marginBottom: '20px', color: '#D81B60'}}>Patient Demographics</h3>
                                
                                <div className="form-group">
                                    <label className="form-label">Patient Name</label>
                                    <input 
                                        className="form-input"
                                        type="text"
                                        value={patientData.name}
                                        onChange={(e) => setPatientData({...patientData, name: e.target.value})}
                                        placeholder="Enter patient name"
                                    />
                                </div>
                                
                                <div className="form-group">
                                    <label className="form-label">Age</label>
                                    <input 
                                        className="form-input"
                                        type="number"
                                        value={patientData.age}
                                        onChange={(e) => setPatientData({...patientData, age: e.target.value})}
                                        placeholder="Enter age"
                                    />
                                </div>
                                
                                <div className="form-group">
                                    <label className="form-label">Weight (kg)</label>
                                    <input 
                                        className="form-input"
                                        type="number"
                                        value={patientData.weight}
                                        onChange={(e) => setPatientData({...patientData, weight: e.target.value})}
                                        placeholder="Enter weight in kg"
                                    />
                                </div>
                                
                                <div className="form-group">
                                    <label className="form-label">Height (cm)</label>
                                    <input 
                                        className="form-input"
                                        type="number"
                                        value={patientData.height}
                                        onChange={(e) => setPatientData({...patientData, height: e.target.value})}
                                        placeholder="Enter height in cm"
                                    />
                                </div>
                                
                                <div className="form-group">
                                    <label className="form-label">Menopausal Status</label>
                                    <select 
                                        className="form-select"
                                        value={patientData.menopausalStatus}
                                        onChange={(e) => setPatientData({...patientData, menopausalStatus: e.target.value})}
                                    >
                                        <option value="premenopausal">Premenopausal</option>
                                        <option value="perimenopausal">Perimenopausal</option>
                                        <option value="postmenopausal">Postmenopausal</option>
                                    </select>
                                </div>
                            </div>
                        )}

                        {assessmentStep === 2 && (
                            <div>
                                <h3 style={{marginBottom: '20px', color: '#D81B60'}}>Symptom Assessment</h3>
                                <p style={{color: '#666', marginBottom: '20px', fontSize: '14px'}}>
                                    Rate each symptom on a scale of 0-6 (0 = None, 6 = Severe)
                                </p>
                                
                                <div className="vas-scale">
                                    <div className="vas-item">
                                        <div className="vas-label">Hot Flashes</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.hotFlashes}
                                            onChange={(e) => setPatientData({...patientData, hotFlashes: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.hotFlashes}</div>
                                    </div>
                                    
                                    <div className="vas-item">
                                        <div className="vas-label">Night Sweats</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.nightSweats}
                                            onChange={(e) => setPatientData({...patientData, nightSweats: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.nightSweats}</div>
                                    </div>
                                    
                                    <div className="vas-item">
                                        <div className="vas-label">Sleep Disturbance</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.sleepDisturbance}
                                            onChange={(e) => setPatientData({...patientData, sleepDisturbance: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.sleepDisturbance}</div>
                                    </div>
                                    
                                    <div className="vas-item">
                                        <div className="vas-label">Vaginal Dryness</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.vaginalDryness}
                                            onChange={(e) => setPatientData({...patientData, vaginalDryness: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.vaginalDryness}</div>
                                    </div>
                                    
                                    <div className="vas-item">
                                        <div className="vas-label">Mood Changes</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.moodChanges}
                                            onChange={(e) => setPatientData({...patientData, moodChanges: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.moodChanges}</div>
                                    </div>
                                    
                                    <div className="vas-item">
                                        <div className="vas-label">Joint Aches</div>
                                        <input 
                                            type="range"
                                            min="0"
                                            max="6"
                                            value={patientData.jointAches}
                                            onChange={(e) => setPatientData({...patientData, jointAches: parseInt(e.target.value)})}
                                            className="vas-slider"
                                        />
                                        <div className="vas-scale-labels">
                                            <span>None</span>
                                            <span>Severe</span>
                                        </div>
                                        <div className="vas-value">Score: {patientData.jointAches}</div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {assessmentStep === 3 && (
                            <div>
                                <h3 style={{marginBottom: '20px', color: '#D81B60'}}>Risk Factors</h3>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.smoking}
                                        onChange={(e) => setPatientData({...patientData, smoking: e.target.checked})}
                                    />
                                    <label>Current smoking</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.diabetes}
                                        onChange={(e) => setPatientData({...patientData, diabetes: e.target.checked})}
                                    />
                                    <label>Diabetes mellitus</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.hypertension}
                                        onChange={(e) => setPatientData({...patientData, hypertension: e.target.checked})}
                                    />
                                    <label>Hypertension</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.cholesterolHigh}
                                        onChange={(e) => setPatientData({...patientData, cholesterolHigh: e.target.checked})}
                                    />
                                    <label>High cholesterol</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.familyHistoryBreastCancer}
                                        onChange={(e) => setPatientData({...patientData, familyHistoryBreastCancer: e.target.checked})}
                                    />
                                    <label>Family history of breast cancer</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.personalHistoryBreastCancer}
                                        onChange={(e) => setPatientData({...patientData, personalHistoryBreastCancer: e.target.checked})}
                                    />
                                    <label>Personal history of breast cancer</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.personalHistoryDVT}
                                        onChange={(e) => setPatientData({...patientData, personalHistoryDVT: e.target.checked})}
                                    />
                                    <label>Personal history of DVT/PE</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.thrombophilia}
                                        onChange={(e) => setPatientData({...patientData, thrombophilia: e.target.checked})}
                                    />
                                    <label>Known thrombophilia</label>
                                </div>
                                
                                <div className="checkbox-group">
                                    <input 
                                        type="checkbox"
                                        className="checkbox"
                                        checked={patientData.hysterectomy}
                                        onChange={(e) => setPatientData({...patientData, hysterectomy: e.target.checked})}
                                    />
                                    <label>Previous hysterectomy</label>
                                </div>
                            </div>
                        )}

                        {assessmentStep === 4 && (
                            <div>
                                <h3 style={{marginBottom: '20px', color: '#D81B60'}}>Review Assessment</h3>
                                
                                <div style={{background: '#f9f9f9', padding: '16px', borderRadius: '8px', marginBottom: '20px'}}>
                                    <h4 style={{marginBottom: '12px'}}>Patient Summary</h4>
                                    <p><strong>Name:</strong> {patientData.name}</p>
                                    <p><strong>Age:</strong> {patientData.age} years</p>
                                    <p><strong>BMI:</strong> {calculateBMI(parseFloat(patientData.weight), parseFloat(patientData.height)) || 'N/A'}</p>
                                    <p><strong>Status:</strong> {patientData.menopausalStatus}</p>
                                </div>
                                
                                <div style={{background: '#f9f9f9', padding: '16px', borderRadius: '8px', marginBottom: '20px'}}>
                                    <h4 style={{marginBottom: '12px'}}>Symptom Scores</h4>
                                    <p>Hot Flashes: {patientData.hotFlashes}/6</p>
                                    <p>Night Sweats: {patientData.nightSweats}/6</p>
                                    <p>Sleep Disturbance: {patientData.sleepDisturbance}/6</p>
                                    <p>Vaginal Dryness: {patientData.vaginalDryness}/6</p>
                                    <p>Mood Changes: {patientData.moodChanges}/6</p>
                                    <p>Joint Aches: {patientData.jointAches}/6</p>
                                </div>
                                
                                <div style={{background: '#f9f9f9', padding: '16px', borderRadius: '8px', marginBottom: '20px'}}>
                                    <h4 style={{marginBottom: '12px'}}>Risk Factors</h4>
                                    {Object.entries({
                                        'Smoking': patientData.smoking,
                                        'Diabetes': patientData.diabetes,
                                        'Hypertension': patientData.hypertension,
                                        'High Cholesterol': patientData.cholesterolHigh,
                                        'Family History Breast Cancer': patientData.familyHistoryBreastCancer,
                                        'Personal History Breast Cancer': patientData.personalHistoryBreastCancer,
                                        'Personal History DVT/PE': patientData.personalHistoryDVT,
                                        'Thrombophilia': patientData.thrombophilia,
                                        'Hysterectomy': patientData.hysterectomy
                                    }).filter(([key, value]) => value).map(([key, value]) => (
                                        <p key={key}>✓ {key}</p>
                                    ))}
                                </div>
                            </div>
                        )}

                        <button 
                            className="primary-button" 
                            onClick={nextStep}
                            disabled={
                                (assessmentStep === 1 && (!patientData.name || !patientData.age || !patientData.weight || !patientData.height))
                            }
                        >
                            {assessmentStep < 4 ? 'Next Step' : 'Calculate Results'}
                        </button>
                    </div>
                );
            };

            const renderResultsScreen = () => {
                if (!riskResults || !currentPatient) return null;
                
                const contraindications = getContraindications(currentPatient);
                
                return (
                    <div>
                        <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                        
                        {/* Patient Info */}
                        <div style={{background: '#e3f2fd', padding: '16px', borderRadius: '10px', marginBottom: '20px', borderLeft: '4px solid #2196F3'}}>
                            <div style={{fontSize: '18px', fontWeight: '600', color: '#1976d2', marginBottom: '8px'}}>
                                {currentPatient.name}, Age {currentPatient.age}
                            </div>
                            <div style={{fontSize: '14px', color: '#666', lineHeight: '1.4'}}>
                                {currentPatient.menopausalStatus} • BMI {currentPatient.bmi} • Height {currentPatient.height}cm • Weight {currentPatient.weight}kg
                            </div>
                        </div>

                        {/* Risk Calculators */}
                        <div className="section">
                            <div className="section-header">
                                <span style={{fontSize: '24px'}}>📊</span>
                                <h2 className="section-title">Risk Assessment Results</h2>
                            </div>
                            
                            <div className="calculator-section">
                                <h3 className="calculator-title">Cardiovascular Risk Assessment</h3>
                                <div className="calculator-grid">
                                    <div className="calculator-item">
                                        <div className="calculator-label">ASCVD Score</div>
                                        <div className="calculator-value">{riskResults.ascvd.risk}%</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.ascvd.category)}`}>
                                            {riskResults.ascvd.category}
                                        </span>
                                    </div>
                                    <div className="calculator-item">
                                        <div className="calculator-label">Framingham Score</div>
                                        <div className="calculator-value">{riskResults.framingham.risk}%</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.framingham.category)}`}>
                                            {riskResults.framingham.category}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div className="calculator-section">
                                <h3 className="calculator-title">Breast Cancer Risk Assessment</h3>
                                <div className="calculator-grid">
                                    <div className="calculator-item">
                                        <div className="calculator-label">Gail Risk</div>
                                        <div className="calculator-value">{riskResults.gail.risk}%</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.gail.category)}`}>
                                            {riskResults.gail.category}
                                        </span>
                                    </div>
                                    <div className="calculator-item">
                                        <div className="calculator-label">Tyrer-Cuzick Risk</div>
                                        <div className="calculator-value">{riskResults.tyrerCuzick.risk}%</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.tyrerCuzick.category)}`}>
                                            {riskResults.tyrerCuzick.category}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div className="calculator-section">
                                <h3 className="calculator-title">VTE & Fracture Risk Assessment</h3>
                                <div className="calculator-grid">
                                    <div className="calculator-item">
                                        <div className="calculator-label">Wells VTE Score</div>
                                        <div className="calculator-value">{riskResults.wells.score}</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.wells.category)}`}>
                                            {riskResults.wells.category}
                                        </span>
                                    </div>
                                    <div className="calculator-item">
                                        <div className="calculator-label">FRAX 10-Year Risk</div>
                                        <div className="calculator-value">{riskResults.frax.majorFractureRisk}%</div>
                                        <span className={`calculator-category ${getCategoryStyle(riskResults.frax.category)}`}>
                                            {riskResults.frax.category}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Clinical Alerts */}
                        {contraindications.length > 0 && (
                            <div className="section">
                                <div className="section-header">
                                    <span style={{fontSize: '24px'}}>⚠️</span>
                                    <h2 className="section-title">Clinical Alerts</h2>
                                </div>
                                
                                {contraindications.map((alert, index) => (
                                    <div key={index} className={`alert-item ${alert.type === 'absolute' ? 'alert-absolute' : 'alert-relative'}`}>
                                        <span style={{fontSize: '20px'}}>{alert.type === 'absolute' ? '🚫' : '⚠️'}</span>
                                        <div className="alert-content">
                                            <div className="alert-title">{alert.title}</div>
                                            <div className="alert-message">{alert.message}</div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}

                        {/* Treatment Recommendations */}
                        <div className="section">
                            <div className="section-header">
                                <span style={{fontSize: '24px'}}>💊</span>
                                <h2 className="section-title">Treatment Recommendations</h2>
                            </div>
                            
                            {contraindications.some(alert => alert.type === 'absolute') ? (
                                <div>
                                    <div className="recommendation-item">
                                        <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                            HRT is contraindicated. Consider non-hormonal alternatives:
                                        </div>
                                    </div>
                                    <div className="recommendation-item">
                                        <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                            • SSRIs/SNRIs for vasomotor symptoms
                                        </div>
                                    </div>
                                    <div className="recommendation-item">
                                        <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                            • Gabapentin for hot flashes
                                        </div>
                                    </div>
                                </div>
                            ) : (
                                <div>
                                    <div className="recommendation-item">
                                        <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                            {currentPatient.hysterectomy ? 
                                                'Estrogen-only therapy (ET) appropriate post-hysterectomy' :
                                                'Combined estrogen-progestogen therapy (EPT) required for uterine protection'
                                            }
                                        </div>
                                    </div>
                                    <div className="recommendation-item">
                                        <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                            {(currentPatient.smoking || currentPatient.personalHistoryDVT || currentPatient.bmi > 30) ?
                                                'Transdermal route preferred to minimize VTE risk' :
                                                'Oral or transdermal routes both acceptable'
                                            }
                                        </div>
                                    </div>
                                    {!currentPatient.hysterectomy && (
                                        <div className="recommendation-item">
                                            <div style={{fontSize: '14px', color: '#333', lineHeight: '1.4'}}>
                                                Micronized progesterone preferred for lower VTE risk
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                        
                        <button className="primary-button" onClick={startNewAssessment}>
                            Start New Assessment
                        </button>
                    </div>
                );
            };

            const renderPatientsScreen = () => (
                <div>
                    <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                    
                    <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px'}}>
                        <h3 style={{color: '#D81B60'}}>Patient Records ({patients.length})</h3>
                        <button 
                            style={{background: '#F44336', color: 'white', border: 'none', padding: '8px 12px', borderRadius: '6px', fontSize: '12px'}}
                            onClick={() => setPatients([])}
                        >
                            Clear All
                        </button>
                    </div>
                    
                    {patients.length === 0 ? (
                        <div style={{textAlign: 'center', padding: '40px 20px'}}>
                            <div style={{fontSize: '60px', marginBottom: '20px'}}>📁</div>
                            <h3 style={{color: '#333', marginBottom: '12px'}}>No Patient Records</h3>
                            <p style={{color: '#666', marginBottom: '24px'}}>
                                Complete patient assessments will appear here.
                            </p>
                            <button className="primary-button" onClick={startNewAssessment}>
                                Start New Assessment
                            </button>
                        </div>
                    ) : (
                        <div>
                            {patients.map(patient => (
                                <div key={patient.id} className="patient-list-item" onClick={() => {
                                    setCurrentPatient(patient);
                                    setRiskResults(patient.risks);
                                    setCurrentScreen('results');
                                }}>
                                    <div className="patient-name">{patient.name}</div>
                                    <div className="patient-details">
                                        Age: {patient.age} • BMI: {patient.bmi} • {patient.menopausalStatus}
                                    </div>
                                    <div className="patient-details">
                                        Created: {new Date(patient.createdAt).toLocaleDateString()}
                                    </div>
                                    <button 
                                        className="delete-button"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            deletePatient(patient.id);
                                        }}
                                    >
                                        Delete
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            );

            const renderGuidelinesScreen = () => (
                <div>
                    <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                    
                    <h3 style={{color: '#D81B60', marginBottom: '20px'}}>MHT Clinical Guidelines</h3>
                    
                    <div style={{background: 'white', borderRadius: '10px', padding: '16px', marginBottom: '12px', borderLeft: '4px solid #4CAF50'}}>
                        <h4 style={{fontSize: '16px', fontWeight: '600', color: '#333', marginBottom: '8px'}}>IMS Guidelines 2023</h4>
                        <p style={{fontSize: '14px', color: '#666', lineHeight: '1.4'}}>
                            Latest International Menopause Society recommendations for hormone therapy initiation, contraindications, and monitoring.
                        </p>
                    </div>
                    
                    <div style={{background: 'white', borderRadius: '10px', padding: '16px', marginBottom: '12px', borderLeft: '4px solid #4CAF50'}}>
                        <h4 style={{fontSize: '16px', fontWeight: '600', color: '#333', marginBottom: '8px'}}>NAMS Position Statement</h4>
                        <p style={{fontSize: '14px', color: '#666', lineHeight: '1.4'}}>
                            North American Menopause Society evidence-based recommendations for menopause management and hormone therapy.
                        </p>
                    </div>
                    
                    <div style={{background: 'white', borderRadius: '10px', padding: '16px', marginBottom: '12px', borderLeft: '4px solid #4CAF50'}}>
                        <h4 style={{fontSize: '16px', fontWeight: '600', color: '#333', marginBottom: '8px'}}>Risk Stratification Protocol</h4>
                        <p style={{fontSize: '14px', color: '#666', lineHeight: '1.4'}}>
                            Systematic approach to cardiovascular, breast cancer, VTE, and fracture risk assessment in perimenopausal and postmenopausal women.
                        </p>
                    </div>
                </div>
            );

            const renderCMEScreen = () => (
                <div>
                    <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                    
                    <div style={{background: 'white', borderRadius: '12px', padding: '20px', marginBottom: '20px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)'}}>
                        <h3 style={{color: '#D81B60', marginBottom: '16px'}}>Your Progress</h3>
                        <div style={{display: 'flex', justifyContent: 'space-around', margin: '20px 0'}}>
                            <div style={{textAlign: 'center'}}>
                                <div style={{fontSize: '24px', fontWeight: 'bold', color: '#D81B60'}}>3</div>
                                <div style={{fontSize: '12px', color: '#666', marginTop: '4px'}}>Credits Earned</div>
                            </div>
                            <div style={{textAlign: 'center'}}>
                                <div style={{fontSize: '24px', fontWeight: 'bold', color: '#D81B60'}}>50%</div>
                                <div style={{fontSize: '12px', color: '#666', marginTop: '4px'}}>Complete</div>
                            </div>
                            <div style={{textAlign: 'center'}}>
                                <div style={{fontSize: '24px', fontWeight: 'bold', color: '#D81B60'}}>Today</div>
                                <div style={{fontSize: '12px', color: '#666', marginTop: '4px'}}>Last Activity</div>
                            </div>
                        </div>
                    </div>

                    <h3 style={{color: '#D81B60', marginBottom: '16px'}}>Learning Modules</h3>
                    
                    <div style={{background: 'white', borderRadius: '12px', marginBottom: '12px', border: '1px solid #e0e0e0'}}>
                        <div style={{padding: '16px'}}>
                            <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px'}}>
                                <span style={{color: '#D81B60'}}>📖</span>
                                <span style={{fontSize: '12px', color: '#666'}}>2 Credits</span>
                            </div>
                            <div style={{fontSize: '16px', fontWeight: 'bold', color: '#333'}}>Introduction to MHT</div>
                            <div style={{fontSize: '14px', color: '#666', lineHeight: '1.4', margin: '8px 0'}}>Fundamental concepts of menopausal hormone therapy</div>
                            <div style={{fontSize: '12px', color: '#999', marginBottom: '12px'}}>~30 min</div>
                        </div>
                        <div style={{display: 'flex', paddingLeft: '16px', paddingRight: '16px', paddingBottom: '16px', gap: '8px'}}>
                            <button style={{flex: 1, padding: '10px', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer', border: '1px solid #D81B60', background: '#FFF5F7', color: '#D81B60'}}>
                                Start
                            </button>
                            <button style={{flex: 1, padding: '10px', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer', border: 'none', background: '#D81B60', color: 'white'}}>
                                Take Quiz
                            </button>
                        </div>
                    </div>
                    
                    <div style={{background: 'white', borderRadius: '12px', marginBottom: '12px', border: '1px solid #e0e0e0'}}>
                        <div style={{padding: '16px'}}>
                            <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px'}}>
                                <span style={{color: '#4CAF50'}}>✅</span>
                                <span style={{fontSize: '12px', color: '#666'}}>3 Credits</span>
                            </div>
                            <div style={{fontSize: '16px', fontWeight: 'bold', color: '#333'}}>Risk Assessment in MHT</div>
                            <div style={{fontSize: '14px', color: '#666', lineHeight: '1.4', margin: '8px 0'}}>Clinical decision making and risk stratification</div>
                            <div style={{fontSize: '12px', color: '#999', marginBottom: '12px'}}>~45 min • Score: 85%</div>
                        </div>
                        <div style={{display: 'flex', paddingLeft: '16px', paddingRight: '16px', paddingBottom: '16px', gap: '8px'}}>
                            <button style={{flex: 1, padding: '10px', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer', border: '1px solid #D81B60', background: '#FFF5F7', color: '#D81B60'}}>
                                Review
                            </button>
                            <button style={{flex: 1, padding: '10px', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer', border: 'none', background: '#D81B60', color: 'white'}}>
                                Take Quiz
                            </button>
                        </div>
                    </div>
                </div>
            );

            return (
                <div className="app-container">
                    <div className="header">
                        {currentScreen !== 'home' && currentScreen !== 'assessment' && currentScreen !== 'results' && (
                            <button className="back-button" onClick={() => setCurrentScreen('home')}>←</button>
                        )}
                        <h1>🏥 MHT Assessment</h1>
                        <p>Clinical Decision Support System</p>
                    </div>
                    
                    <div className="content">
                        {currentScreen === 'home' && renderHomeScreen()}
                        {currentScreen === 'assessment' && renderAssessmentScreen()}
                        {currentScreen === 'results' && renderResultsScreen()}
                        {currentScreen === 'patients' && renderPatientsScreen()}
                        {currentScreen === 'guidelines' && renderGuidelinesScreen()}
                        {currentScreen === 'cme' && renderCMEScreen()}
                    </div>
                    
                    {renderNavigation()}
                </div>
            );
        }

        ReactDOM.render(<CompleteMHTApp />, document.getElementById('app'));
    </script>
</body>
</html>